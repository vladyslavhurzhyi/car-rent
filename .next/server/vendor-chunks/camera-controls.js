/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/camera-controls";
exports.ids = ["vendor-chunks/camera-controls"];
exports.modules = {

/***/ "(ssr)/./node_modules/camera-controls/dist/camera-controls.js":
/*!**************************************************************!*\
  !*** ./node_modules/camera-controls/dist/camera-controls.js ***!
  \**************************************************************/
/***/ (function(module) {

eval("/*!\n * camera-controls\n * https://github.com/yomotsu/camera-controls\n * (c) 2017 @yomotsu\n * Released under the MIT License.\n */\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\t0;\n})(this, (function () { 'use strict';\n\n\t// see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#value\n\tconst MOUSE_BUTTON = {\n\t    LEFT: 1,\n\t    RIGHT: 2,\n\t    MIDDLE: 4,\n\t};\n\tconst ACTION = Object.freeze({\n\t    NONE: 0,\n\t    ROTATE: 1,\n\t    TRUCK: 2,\n\t    OFFSET: 4,\n\t    DOLLY: 8,\n\t    ZOOM: 16,\n\t    TOUCH_ROTATE: 32,\n\t    TOUCH_TRUCK: 64,\n\t    TOUCH_OFFSET: 128,\n\t    TOUCH_DOLLY: 256,\n\t    TOUCH_ZOOM: 512,\n\t    TOUCH_DOLLY_TRUCK: 1024,\n\t    TOUCH_DOLLY_OFFSET: 2048,\n\t    TOUCH_DOLLY_ROTATE: 4096,\n\t    TOUCH_ZOOM_TRUCK: 8192,\n\t    TOUCH_ZOOM_OFFSET: 16384,\n\t    TOUCH_ZOOM_ROTATE: 32768,\n\t});\n\tconst DOLLY_DIRECTION = {\n\t    NONE: 0,\n\t    IN: 1,\n\t    OUT: -1,\n\t};\n\tfunction isPerspectiveCamera(camera) {\n\t    return camera.isPerspectiveCamera;\n\t}\n\tfunction isOrthographicCamera(camera) {\n\t    return camera.isOrthographicCamera;\n\t}\n\n\tconst PI_2 = Math.PI * 2;\n\tconst PI_HALF = Math.PI / 2;\n\n\tconst EPSILON = 1e-5;\n\tconst DEG2RAD = Math.PI / 180;\n\tfunction clamp(value, min, max) {\n\t    return Math.max(min, Math.min(max, value));\n\t}\n\tfunction approxZero(number, error = EPSILON) {\n\t    return Math.abs(number) < error;\n\t}\n\tfunction approxEquals(a, b, error = EPSILON) {\n\t    return approxZero(a - b, error);\n\t}\n\tfunction roundToStep(value, step) {\n\t    return Math.round(value / step) * step;\n\t}\n\tfunction infinityToMaxNumber(value) {\n\t    if (isFinite(value))\n\t        return value;\n\t    if (value < 0)\n\t        return -Number.MAX_VALUE;\n\t    return Number.MAX_VALUE;\n\t}\n\tfunction maxNumberToInfinity(value) {\n\t    if (Math.abs(value) < Number.MAX_VALUE)\n\t        return value;\n\t    return value * Infinity;\n\t}\n\t// https://docs.unity3d.com/ScriptReference/Mathf.SmoothDamp.html\n\t// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Mathf.cs#L308\n\tfunction smoothDamp(current, target, currentVelocityRef, smoothTime, maxSpeed = Infinity, deltaTime) {\n\t    // Based on Game Programming Gems 4 Chapter 1.10\n\t    smoothTime = Math.max(0.0001, smoothTime);\n\t    const omega = 2 / smoothTime;\n\t    const x = omega * deltaTime;\n\t    const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n\t    let change = current - target;\n\t    const originalTo = target;\n\t    // Clamp maximum speed\n\t    const maxChange = maxSpeed * smoothTime;\n\t    change = clamp(change, -maxChange, maxChange);\n\t    target = current - change;\n\t    const temp = (currentVelocityRef.value + omega * change) * deltaTime;\n\t    currentVelocityRef.value = (currentVelocityRef.value - omega * temp) * exp;\n\t    let output = target + (change + temp) * exp;\n\t    // Prevent overshooting\n\t    if (originalTo - current > 0.0 === output > originalTo) {\n\t        output = originalTo;\n\t        currentVelocityRef.value = (output - originalTo) / deltaTime;\n\t    }\n\t    return output;\n\t}\n\t// https://docs.unity3d.com/ScriptReference/Vector3.SmoothDamp.html\n\t// https://github.com/Unity-Technologies/UnityCsReference/blob/a2bdfe9b3c4cd4476f44bf52f848063bfaf7b6b9/Runtime/Export/Math/Vector3.cs#L97\n\tfunction smoothDampVec3(current, target, currentVelocityRef, smoothTime, maxSpeed = Infinity, deltaTime, out) {\n\t    // Based on Game Programming Gems 4 Chapter 1.10\n\t    smoothTime = Math.max(0.0001, smoothTime);\n\t    const omega = 2 / smoothTime;\n\t    const x = omega * deltaTime;\n\t    const exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);\n\t    let targetX = target.x;\n\t    let targetY = target.y;\n\t    let targetZ = target.z;\n\t    let changeX = current.x - targetX;\n\t    let changeY = current.y - targetY;\n\t    let changeZ = current.z - targetZ;\n\t    const originalToX = targetX;\n\t    const originalToY = targetY;\n\t    const originalToZ = targetZ;\n\t    // Clamp maximum speed\n\t    const maxChange = maxSpeed * smoothTime;\n\t    const maxChangeSq = maxChange * maxChange;\n\t    const magnitudeSq = changeX * changeX + changeY * changeY + changeZ * changeZ;\n\t    if (magnitudeSq > maxChangeSq) {\n\t        const magnitude = Math.sqrt(magnitudeSq);\n\t        changeX = changeX / magnitude * maxChange;\n\t        changeY = changeY / magnitude * maxChange;\n\t        changeZ = changeZ / magnitude * maxChange;\n\t    }\n\t    targetX = current.x - changeX;\n\t    targetY = current.y - changeY;\n\t    targetZ = current.z - changeZ;\n\t    const tempX = (currentVelocityRef.x + omega * changeX) * deltaTime;\n\t    const tempY = (currentVelocityRef.y + omega * changeY) * deltaTime;\n\t    const tempZ = (currentVelocityRef.z + omega * changeZ) * deltaTime;\n\t    currentVelocityRef.x = (currentVelocityRef.x - omega * tempX) * exp;\n\t    currentVelocityRef.y = (currentVelocityRef.y - omega * tempY) * exp;\n\t    currentVelocityRef.z = (currentVelocityRef.z - omega * tempZ) * exp;\n\t    out.x = targetX + (changeX + tempX) * exp;\n\t    out.y = targetY + (changeY + tempY) * exp;\n\t    out.z = targetZ + (changeZ + tempZ) * exp;\n\t    // Prevent overshooting\n\t    const origMinusCurrentX = originalToX - current.x;\n\t    const origMinusCurrentY = originalToY - current.y;\n\t    const origMinusCurrentZ = originalToZ - current.z;\n\t    const outMinusOrigX = out.x - originalToX;\n\t    const outMinusOrigY = out.y - originalToY;\n\t    const outMinusOrigZ = out.z - originalToZ;\n\t    if (origMinusCurrentX * outMinusOrigX + origMinusCurrentY * outMinusOrigY + origMinusCurrentZ * outMinusOrigZ > 0) {\n\t        out.x = originalToX;\n\t        out.y = originalToY;\n\t        out.z = originalToZ;\n\t        currentVelocityRef.x = (out.x - originalToX) / deltaTime;\n\t        currentVelocityRef.y = (out.y - originalToY) / deltaTime;\n\t        currentVelocityRef.z = (out.z - originalToZ) / deltaTime;\n\t    }\n\t    return out;\n\t}\n\n\tfunction extractClientCoordFromEvent(pointers, out) {\n\t    out.set(0, 0);\n\t    pointers.forEach((pointer) => {\n\t        out.x += pointer.clientX;\n\t        out.y += pointer.clientY;\n\t    });\n\t    out.x /= pointers.length;\n\t    out.y /= pointers.length;\n\t}\n\n\tfunction notSupportedInOrthographicCamera(camera, message) {\n\t    if (isOrthographicCamera(camera)) {\n\t        console.warn(`${message} is not supported in OrthographicCamera`);\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\n\tclass EventDispatcher {\n\t    constructor() {\n\t        this._listeners = {};\n\t    }\n\t    /**\n\t     * Adds the specified event listener.\n\t     * @param type event name\n\t     * @param listener handler function\n\t     * @category Methods\n\t     */\n\t    addEventListener(type, listener) {\n\t        const listeners = this._listeners;\n\t        if (listeners[type] === undefined)\n\t            listeners[type] = [];\n\t        if (listeners[type].indexOf(listener) === -1)\n\t            listeners[type].push(listener);\n\t    }\n\t    /**\n\t     * Presence of the specified event listener.\n\t     * @param type event name\n\t     * @param listener handler function\n\t     * @category Methods\n\t     */\n\t    hasEventListener(type, listener) {\n\t        const listeners = this._listeners;\n\t        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t    }\n\t    /**\n\t     * Removes the specified event listener\n\t     * @param type event name\n\t     * @param listener handler function\n\t     * @category Methods\n\t     */\n\t    removeEventListener(type, listener) {\n\t        const listeners = this._listeners;\n\t        const listenerArray = listeners[type];\n\t        if (listenerArray !== undefined) {\n\t            const index = listenerArray.indexOf(listener);\n\t            if (index !== -1)\n\t                listenerArray.splice(index, 1);\n\t        }\n\t    }\n\t    /**\n\t     * Removes all event listeners\n\t     * @param type event name\n\t     * @category Methods\n\t     */\n\t    removeAllEventListeners(type) {\n\t        if (!type) {\n\t            this._listeners = {};\n\t            return;\n\t        }\n\t        if (Array.isArray(this._listeners[type]))\n\t            this._listeners[type].length = 0;\n\t    }\n\t    /**\n\t     * Fire an event type.\n\t     * @param event DispatcherEvent\n\t     * @category Methods\n\t     */\n\t    dispatchEvent(event) {\n\t        const listeners = this._listeners;\n\t        const listenerArray = listeners[event.type];\n\t        if (listenerArray !== undefined) {\n\t            event.target = this;\n\t            const array = listenerArray.slice(0);\n\t            for (let i = 0, l = array.length; i < l; i++) {\n\t                array[i].call(this, event);\n\t            }\n\t        }\n\t    }\n\t}\n\n\tconst VERSION = '2.7.2'; // will be replaced with `version` in package.json during the build process.\n\tconst TOUCH_DOLLY_FACTOR = 1 / 8;\n\tconst isBrowser = typeof window !== 'undefined';\n\tconst isMac = isBrowser && /Mac/.test(navigator.platform);\n\tconst isPointerEventsNotSupported = !(isBrowser && 'PointerEvent' in window); // macOS Safari 12 does not support PointerEvents API\n\tlet THREE;\n\tlet _ORIGIN;\n\tlet _AXIS_Y;\n\tlet _AXIS_Z;\n\tlet _v2;\n\tlet _v3A;\n\tlet _v3B;\n\tlet _v3C;\n\tlet _cameraDirection;\n\tlet _xColumn;\n\tlet _yColumn;\n\tlet _zColumn;\n\tlet _deltaTarget;\n\tlet _deltaOffset;\n\tlet _sphericalA;\n\tlet _sphericalB;\n\tlet _box3A;\n\tlet _box3B;\n\tlet _sphere;\n\tlet _quaternionA;\n\tlet _quaternionB;\n\tlet _rotationMatrix;\n\tlet _raycaster;\n\tclass CameraControls extends EventDispatcher {\n\t    /**\n\t     * Injects THREE as the dependency. You can then proceed to use CameraControls.\n\t     *\n\t     * e.g\n\t     * ```javascript\n\t     * CameraControls.install( { THREE: THREE } );\n\t     * ```\n\t     *\n\t     * Note: If you do not wish to use enter three.js to reduce file size(tree-shaking for example), make a subset to install.\n\t     *\n\t     * ```js\n\t     * import {\n\t     * \tVector2,\n\t     * \tVector3,\n\t     * \tVector4,\n\t     * \tQuaternion,\n\t     * \tMatrix4,\n\t     * \tSpherical,\n\t     * \tBox3,\n\t     * \tSphere,\n\t     * \tRaycaster,\n\t     * \tMathUtils,\n\t     * } from 'three';\n\t     *\n\t     * const subsetOfTHREE = {\n\t     * \tVector2   : Vector2,\n\t     * \tVector3   : Vector3,\n\t     * \tVector4   : Vector4,\n\t     * \tQuaternion: Quaternion,\n\t     * \tMatrix4   : Matrix4,\n\t     * \tSpherical : Spherical,\n\t     * \tBox3      : Box3,\n\t     * \tSphere    : Sphere,\n\t     * \tRaycaster : Raycaster,\n\t     * };\n\n\t     * CameraControls.install( { THREE: subsetOfTHREE } );\n\t     * ```\n\t     * @category Statics\n\t     */\n\t    static install(libs) {\n\t        THREE = libs.THREE;\n\t        _ORIGIN = Object.freeze(new THREE.Vector3(0, 0, 0));\n\t        _AXIS_Y = Object.freeze(new THREE.Vector3(0, 1, 0));\n\t        _AXIS_Z = Object.freeze(new THREE.Vector3(0, 0, 1));\n\t        _v2 = new THREE.Vector2();\n\t        _v3A = new THREE.Vector3();\n\t        _v3B = new THREE.Vector3();\n\t        _v3C = new THREE.Vector3();\n\t        _cameraDirection = new THREE.Vector3();\n\t        _xColumn = new THREE.Vector3();\n\t        _yColumn = new THREE.Vector3();\n\t        _zColumn = new THREE.Vector3();\n\t        _deltaTarget = new THREE.Vector3();\n\t        _deltaOffset = new THREE.Vector3();\n\t        _sphericalA = new THREE.Spherical();\n\t        _sphericalB = new THREE.Spherical();\n\t        _box3A = new THREE.Box3();\n\t        _box3B = new THREE.Box3();\n\t        _sphere = new THREE.Sphere();\n\t        _quaternionA = new THREE.Quaternion();\n\t        _quaternionB = new THREE.Quaternion();\n\t        _rotationMatrix = new THREE.Matrix4();\n\t        _raycaster = new THREE.Raycaster();\n\t    }\n\t    /**\n\t     * list all ACTIONs\n\t     * @category Statics\n\t     */\n\t    static get ACTION() {\n\t        return ACTION;\n\t    }\n\t    /**\n\t     * Creates a `CameraControls` instance.\n\t     *\n\t     * Note:\n\t     * You **must install** three.js before using camera-controls. see [#install](#install)\n\t     * Not doing so will lead to runtime errors (`undefined` references to THREE).\n\t     *\n\t     * e.g.\n\t     * ```\n\t     * CameraControls.install( { THREE } );\n\t     * const cameraControls = new CameraControls( camera, domElement );\n\t     * ```\n\t     *\n\t     * @param camera A `THREE.PerspectiveCamera` or `THREE.OrthographicCamera` to be controlled.\n\t     * @param domElement A `HTMLElement` for the draggable area, usually `renderer.domElement`.\n\t     * @category Constructor\n\t     */\n\t    constructor(camera, domElement) {\n\t        super();\n\t        /**\n\t         * Minimum vertical angle in radians.\n\t         * The angle has to be between `0` and `.maxPolarAngle` inclusive.\n\t         * The default value is `0`.\n\t         *\n\t         * e.g.\n\t         * ```\n\t         * cameraControls.maxPolarAngle = 0;\n\t         * ```\n\t         * @category Properties\n\t         */\n\t        this.minPolarAngle = 0; // radians\n\t        /**\n\t         * Maximum vertical angle in radians.\n\t         * The angle has to be between `.maxPolarAngle` and `Math.PI` inclusive.\n\t         * The default value is `Math.PI`.\n\t         *\n\t         * e.g.\n\t         * ```\n\t         * cameraControls.maxPolarAngle = Math.PI;\n\t         * ```\n\t         * @category Properties\n\t         */\n\t        this.maxPolarAngle = Math.PI; // radians\n\t        /**\n\t         * Minimum horizontal angle in radians.\n\t         * The angle has to be less than `.maxAzimuthAngle`.\n\t         * The default value is `- Infinity`.\n\t         *\n\t         * e.g.\n\t         * ```\n\t         * cameraControls.minAzimuthAngle = - Infinity;\n\t         * ```\n\t         * @category Properties\n\t         */\n\t        this.minAzimuthAngle = -Infinity; // radians\n\t        /**\n\t         * Maximum horizontal angle in radians.\n\t         * The angle has to be greater than `.minAzimuthAngle`.\n\t         * The default value is `Infinity`.\n\t         *\n\t         * e.g.\n\t         * ```\n\t         * cameraControls.maxAzimuthAngle = Infinity;\n\t         * ```\n\t         * @category Properties\n\t         */\n\t        this.maxAzimuthAngle = Infinity; // radians\n\t        // How far you can dolly in and out ( PerspectiveCamera only )\n\t        /**\n\t         * Minimum distance for dolly. The value must be higher than `0`. Default is `Number.EPSILON`.\n\t         * PerspectiveCamera only.\n\t         * @category Properties\n\t         */\n\t        this.minDistance = Number.EPSILON;\n\t        /**\n\t         * Maximum distance for dolly. The value must be higher than `minDistance`. Default is `Infinity`.\n\t         * PerspectiveCamera only.\n\t         * @category Properties\n\t         */\n\t        this.maxDistance = Infinity;\n\t        /**\n\t         * `true` to enable Infinity Dolly for wheel and pinch. Use this with `minDistance` and `maxDistance`\n\t         * If the Dolly distance is less (or over) than the `minDistance` (or `maxDistance`), `infinityDolly` will keep the distance and pushes the target position instead.\n\t         * @category Properties\n\t         */\n\t        this.infinityDolly = false;\n\t        /**\n\t         * Minimum camera zoom.\n\t         * @category Properties\n\t         */\n\t        this.minZoom = 0.01;\n\t        /**\n\t         * Maximum camera zoom.\n\t         * @category Properties\n\t         */\n\t        this.maxZoom = Infinity;\n\t        /**\n\t         * Approximate time in seconds to reach the target. A smaller value will reach the target faster.\n\t         * @category Properties\n\t         */\n\t        this.smoothTime = 0.25;\n\t        /**\n\t         * the smoothTime while dragging\n\t         * @category Properties\n\t         */\n\t        this.draggingSmoothTime = 0.125;\n\t        /**\n\t         * Max transition speed in unit-per-seconds\n\t         * @category Properties\n\t         */\n\t        this.maxSpeed = Infinity;\n\t        /**\n\t         * Speed of azimuth (horizontal) rotation.\n\t         * @category Properties\n\t         */\n\t        this.azimuthRotateSpeed = 1.0;\n\t        /**\n\t         * Speed of polar (vertical) rotation.\n\t         * @category Properties\n\t         */\n\t        this.polarRotateSpeed = 1.0;\n\t        /**\n\t         * Speed of mouse-wheel dollying.\n\t         * @category Properties\n\t         */\n\t        this.dollySpeed = 1.0;\n\t        /**\n\t         * `true` to invert direction when dollying or zooming via drag\n\t         * @category Properties\n\t         */\n\t        this.dollyDragInverted = false;\n\t        /**\n\t         * Speed of drag for truck and pedestal.\n\t         * @category Properties\n\t         */\n\t        this.truckSpeed = 2.0;\n\t        /**\n\t         * `true` to enable Dolly-in to the mouse cursor coords.\n\t         * @category Properties\n\t         */\n\t        this.dollyToCursor = false;\n\t        /**\n\t         * @category Properties\n\t         */\n\t        this.dragToOffset = false;\n\t        /**\n\t         * The same as `.screenSpacePanning` in three.js's OrbitControls.\n\t         * @category Properties\n\t         */\n\t        this.verticalDragToForward = false;\n\t        /**\n\t         * Friction ratio of the boundary.\n\t         * @category Properties\n\t         */\n\t        this.boundaryFriction = 0.0;\n\t        /**\n\t         * Controls how soon the `rest` event fires as the camera slows.\n\t         * @category Properties\n\t         */\n\t        this.restThreshold = 0.01;\n\t        /**\n\t         * An array of Meshes to collide with camera.\n\t         * Be aware colliderMeshes may decrease performance. The collision test uses 4 raycasters from the camera since the near plane has 4 corners.\n\t         * @category Properties\n\t         */\n\t        this.colliderMeshes = [];\n\t        /**\n\t         * Force cancel user dragging.\n\t         * @category Methods\n\t         */\n\t        // cancel will be overwritten in the constructor.\n\t        this.cancel = () => { };\n\t        this._enabled = true;\n\t        this._state = ACTION.NONE;\n\t        this._viewport = null;\n\t        this._changedDolly = 0;\n\t        this._changedZoom = 0;\n\t        this._hasRested = true;\n\t        this._boundaryEnclosesCamera = false;\n\t        this._needsUpdate = true;\n\t        this._updatedLastTime = false;\n\t        this._elementRect = new DOMRect();\n\t        this._isDragging = false;\n\t        this._activePointers = [];\n\t        this._lockedPointer = null;\n\t        this._interactiveArea = new DOMRect(0, 0, 1, 1);\n\t        // Use draggingSmoothTime over smoothTime while true.\n\t        // set automatically true on user-dragging start.\n\t        // set automatically false on programmable methods call.\n\t        this._isUserControllingRotate = false;\n\t        this._isUserControllingDolly = false;\n\t        this._isUserControllingTruck = false;\n\t        this._isUserControllingOffset = false;\n\t        this._isUserControllingZoom = false;\n\t        this._lastDollyDirection = DOLLY_DIRECTION.NONE;\n\t        // velocities for smoothDamp\n\t        this._thetaVelocity = { value: 0 };\n\t        this._phiVelocity = { value: 0 };\n\t        this._radiusVelocity = { value: 0 };\n\t        this._targetVelocity = new THREE.Vector3();\n\t        this._focalOffsetVelocity = new THREE.Vector3();\n\t        this._zoomVelocity = { value: 0 };\n\t        this._truckInternal = (deltaX, deltaY, dragToOffset) => {\n\t            let truckX;\n\t            let pedestalY;\n\t            if (isPerspectiveCamera(this._camera)) {\n\t                const offset = _v3A.copy(this._camera.position).sub(this._target);\n\t                // half of the fov is center to top of screen\n\t                const fov = this._camera.getEffectiveFOV() * DEG2RAD;\n\t                const targetDistance = offset.length() * Math.tan(fov * 0.5);\n\t                truckX = (this.truckSpeed * deltaX * targetDistance / this._elementRect.height);\n\t                pedestalY = (this.truckSpeed * deltaY * targetDistance / this._elementRect.height);\n\t            }\n\t            else if (isOrthographicCamera(this._camera)) {\n\t                const camera = this._camera;\n\t                truckX = deltaX * (camera.right - camera.left) / camera.zoom / this._elementRect.width;\n\t                pedestalY = deltaY * (camera.top - camera.bottom) / camera.zoom / this._elementRect.height;\n\t            }\n\t            else {\n\t                return;\n\t            }\n\t            if (this.verticalDragToForward) {\n\t                dragToOffset ?\n\t                    this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y, this._focalOffsetEnd.z, true) :\n\t                    this.truck(truckX, 0, true);\n\t                this.forward(-pedestalY, true);\n\t            }\n\t            else {\n\t                dragToOffset ?\n\t                    this.setFocalOffset(this._focalOffsetEnd.x + truckX, this._focalOffsetEnd.y + pedestalY, this._focalOffsetEnd.z, true) :\n\t                    this.truck(truckX, pedestalY, true);\n\t            }\n\t        };\n\t        this._rotateInternal = (deltaX, deltaY) => {\n\t            const theta = PI_2 * this.azimuthRotateSpeed * deltaX / this._elementRect.height; // divide by *height* to refer the resolution\n\t            const phi = PI_2 * this.polarRotateSpeed * deltaY / this._elementRect.height;\n\t            this.rotate(theta, phi, true);\n\t        };\n\t        this._dollyInternal = (delta, x, y) => {\n\t            const dollyScale = Math.pow(0.95, -delta * this.dollySpeed);\n\t            const lastDistance = this._sphericalEnd.radius;\n\t            const distance = this._sphericalEnd.radius * dollyScale;\n\t            const clampedDistance = clamp(distance, this.minDistance, this.maxDistance);\n\t            const overflowedDistance = clampedDistance - distance;\n\t            if (this.infinityDolly && this.dollyToCursor) {\n\t                this._dollyToNoClamp(distance, true);\n\t            }\n\t            else if (this.infinityDolly && !this.dollyToCursor) {\n\t                this.dollyInFixed(overflowedDistance, true);\n\t                this._dollyToNoClamp(clampedDistance, true);\n\t            }\n\t            else {\n\t                this._dollyToNoClamp(clampedDistance, true);\n\t            }\n\t            if (this.dollyToCursor) {\n\t                this._changedDolly += (this.infinityDolly ? distance : clampedDistance) - lastDistance;\n\t                this._dollyControlCoord.set(x, y);\n\t            }\n\t            this._lastDollyDirection = Math.sign(-delta);\n\t        };\n\t        this._zoomInternal = (delta, x, y) => {\n\t            const zoomScale = Math.pow(0.95, delta * this.dollySpeed);\n\t            const lastZoom = this._zoom;\n\t            const zoom = this._zoom * zoomScale;\n\t            // for both PerspectiveCamera and OrthographicCamera\n\t            this.zoomTo(zoom, true);\n\t            if (this.dollyToCursor) {\n\t                this._changedZoom += zoom - lastZoom;\n\t                this._dollyControlCoord.set(x, y);\n\t            }\n\t        };\n\t        // Check if the user has installed THREE\n\t        if (typeof THREE === 'undefined') {\n\t            console.error('camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information.');\n\t        }\n\t        this._camera = camera;\n\t        this._yAxisUpSpace = new THREE.Quaternion().setFromUnitVectors(this._camera.up, _AXIS_Y);\n\t        this._yAxisUpSpaceInverse = this._yAxisUpSpace.clone().invert();\n\t        this._state = ACTION.NONE;\n\t        // the location\n\t        this._target = new THREE.Vector3();\n\t        this._targetEnd = this._target.clone();\n\t        this._focalOffset = new THREE.Vector3();\n\t        this._focalOffsetEnd = this._focalOffset.clone();\n\t        // rotation\n\t        this._spherical = new THREE.Spherical().setFromVector3(_v3A.copy(this._camera.position).applyQuaternion(this._yAxisUpSpace));\n\t        this._sphericalEnd = this._spherical.clone();\n\t        this._lastDistance = this._spherical.radius;\n\t        this._zoom = this._camera.zoom;\n\t        this._zoomEnd = this._zoom;\n\t        this._lastZoom = this._zoom;\n\t        // collisionTest uses nearPlane.s\n\t        this._nearPlaneCorners = [\n\t            new THREE.Vector3(),\n\t            new THREE.Vector3(),\n\t            new THREE.Vector3(),\n\t            new THREE.Vector3(),\n\t        ];\n\t        this._updateNearPlaneCorners();\n\t        // Target cannot move outside of this box\n\t        this._boundary = new THREE.Box3(new THREE.Vector3(-Infinity, -Infinity, -Infinity), new THREE.Vector3(Infinity, Infinity, Infinity));\n\t        // reset\n\t        this._cameraUp0 = this._camera.up.clone();\n\t        this._target0 = this._target.clone();\n\t        this._position0 = this._camera.position.clone();\n\t        this._zoom0 = this._zoom;\n\t        this._focalOffset0 = this._focalOffset.clone();\n\t        this._dollyControlCoord = new THREE.Vector2();\n\t        // configs\n\t        this.mouseButtons = {\n\t            left: ACTION.ROTATE,\n\t            middle: ACTION.DOLLY,\n\t            right: ACTION.TRUCK,\n\t            wheel: isPerspectiveCamera(this._camera) ? ACTION.DOLLY :\n\t                isOrthographicCamera(this._camera) ? ACTION.ZOOM :\n\t                    ACTION.NONE,\n\t        };\n\t        this.touches = {\n\t            one: ACTION.TOUCH_ROTATE,\n\t            two: isPerspectiveCamera(this._camera) ? ACTION.TOUCH_DOLLY_TRUCK :\n\t                isOrthographicCamera(this._camera) ? ACTION.TOUCH_ZOOM_TRUCK :\n\t                    ACTION.NONE,\n\t            three: ACTION.TOUCH_TRUCK,\n\t        };\n\t        const dragStartPosition = new THREE.Vector2();\n\t        const lastDragPosition = new THREE.Vector2();\n\t        const dollyStart = new THREE.Vector2();\n\t        const onPointerDown = (event) => {\n\t            if (!this._enabled || !this._domElement)\n\t                return;\n\t            if (this._interactiveArea.left !== 0 ||\n\t                this._interactiveArea.top !== 0 ||\n\t                this._interactiveArea.width !== 1 ||\n\t                this._interactiveArea.height !== 1) {\n\t                const elRect = this._domElement.getBoundingClientRect();\n\t                const left = event.clientX / elRect.width;\n\t                const top = event.clientY / elRect.height;\n\t                // check if the interactiveArea contains the drag start position.\n\t                if (left < this._interactiveArea.left ||\n\t                    left > this._interactiveArea.right ||\n\t                    top < this._interactiveArea.top ||\n\t                    top > this._interactiveArea.bottom)\n\t                    return;\n\t            }\n\t            // Don't call `event.preventDefault()` on the pointerdown event\n\t            // to keep receiving pointermove evens outside dragging iframe\n\t            // https://taye.me/blog/tips/2015/11/16/mouse-drag-outside-iframe/\n\t            const mouseButton = event.pointerType !== 'mouse' ? null :\n\t                (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT :\n\t                    (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE :\n\t                        (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT :\n\t                            null;\n\t            if (mouseButton !== null) {\n\t                const zombiePointer = this._findPointerByMouseButton(mouseButton);\n\t                zombiePointer && this._disposePointer(zombiePointer);\n\t            }\n\t            if ((event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT && this._lockedPointer)\n\t                return;\n\t            const pointer = {\n\t                pointerId: event.pointerId,\n\t                clientX: event.clientX,\n\t                clientY: event.clientY,\n\t                deltaX: 0,\n\t                deltaY: 0,\n\t                mouseButton,\n\t            };\n\t            this._activePointers.push(pointer);\n\t            // eslint-disable-next-line no-undef\n\t            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n\t            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n\t            this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, { passive: false });\n\t            this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n\t            this._isDragging = true;\n\t            startDragging(event);\n\t        };\n\t        const onMouseDown = (event) => {\n\t            if (!this._enabled || !this._domElement || this._lockedPointer)\n\t                return;\n\t            if (this._interactiveArea.left !== 0 ||\n\t                this._interactiveArea.top !== 0 ||\n\t                this._interactiveArea.width !== 1 ||\n\t                this._interactiveArea.height !== 1) {\n\t                const elRect = this._domElement.getBoundingClientRect();\n\t                const left = event.clientX / elRect.width;\n\t                const top = event.clientY / elRect.height;\n\t                // check if the interactiveArea contains the drag start position.\n\t                if (left < this._interactiveArea.left ||\n\t                    left > this._interactiveArea.right ||\n\t                    top < this._interactiveArea.top ||\n\t                    top > this._interactiveArea.bottom)\n\t                    return;\n\t            }\n\t            const mouseButton = (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT :\n\t                (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE ? MOUSE_BUTTON.MIDDLE :\n\t                    (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT ? MOUSE_BUTTON.RIGHT :\n\t                        null;\n\t            if (mouseButton !== null) {\n\t                const zombiePointer = this._findPointerByMouseButton(mouseButton);\n\t                zombiePointer && this._disposePointer(zombiePointer);\n\t            }\n\t            const pointer = {\n\t                pointerId: 1,\n\t                clientX: event.clientX,\n\t                clientY: event.clientY,\n\t                deltaX: 0,\n\t                deltaY: 0,\n\t                mouseButton: (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.LEFT :\n\t                    (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.MIDDLE :\n\t                        (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.LEFT ? MOUSE_BUTTON.RIGHT :\n\t                            null,\n\t            };\n\t            this._activePointers.push(pointer);\n\t            // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n\t            // eslint-disable-next-line no-undef\n\t            this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n\t            this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n\t            this._domElement.ownerDocument.addEventListener('mousemove', onMouseMove);\n\t            this._domElement.ownerDocument.addEventListener('mouseup', onMouseUp);\n\t            this._isDragging = true;\n\t            startDragging(event);\n\t        };\n\t        const onPointerMove = (event) => {\n\t            if (event.cancelable)\n\t                event.preventDefault();\n\t            const pointerId = event.pointerId;\n\t            const pointer = this._lockedPointer || this._findPointerById(pointerId);\n\t            if (!pointer)\n\t                return;\n\t            pointer.clientX = event.clientX;\n\t            pointer.clientY = event.clientY;\n\t            pointer.deltaX = event.movementX;\n\t            pointer.deltaY = event.movementY;\n\t            this._state = 0;\n\t            if (event.pointerType === 'touch') {\n\t                switch (this._activePointers.length) {\n\t                    case 1:\n\t                        this._state = this.touches.one;\n\t                        break;\n\t                    case 2:\n\t                        this._state = this.touches.two;\n\t                        break;\n\t                    case 3:\n\t                        this._state = this.touches.three;\n\t                        break;\n\t                }\n\t            }\n\t            else {\n\t                if ((!this._isDragging && this._lockedPointer) ||\n\t                    this._isDragging && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n\t                    this._state = this._state | this.mouseButtons.left;\n\t                }\n\t                if (this._isDragging && (event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n\t                    this._state = this._state | this.mouseButtons.middle;\n\t                }\n\t                if (this._isDragging && (event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n\t                    this._state = this._state | this.mouseButtons.right;\n\t                }\n\t            }\n\t            dragging();\n\t        };\n\t        const onMouseMove = (event) => {\n\t            const pointer = this._lockedPointer || this._findPointerById(1);\n\t            if (!pointer)\n\t                return;\n\t            pointer.clientX = event.clientX;\n\t            pointer.clientY = event.clientY;\n\t            pointer.deltaX = event.movementX;\n\t            pointer.deltaY = event.movementY;\n\t            this._state = 0;\n\t            if (this._lockedPointer ||\n\t                (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n\t                this._state = this._state | this.mouseButtons.left;\n\t            }\n\t            if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n\t                this._state = this._state | this.mouseButtons.middle;\n\t            }\n\t            if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n\t                this._state = this._state | this.mouseButtons.right;\n\t            }\n\t            dragging();\n\t        };\n\t        const onPointerUp = (event) => {\n\t            const pointer = this._findPointerById(event.pointerId);\n\t            if (pointer && pointer === this._lockedPointer)\n\t                return;\n\t            pointer && this._disposePointer(pointer);\n\t            if (event.pointerType === 'touch') {\n\t                switch (this._activePointers.length) {\n\t                    case 0:\n\t                        this._state = ACTION.NONE;\n\t                        break;\n\t                    case 1:\n\t                        this._state = this.touches.one;\n\t                        break;\n\t                    case 2:\n\t                        this._state = this.touches.two;\n\t                        break;\n\t                    case 3:\n\t                        this._state = this.touches.three;\n\t                        break;\n\t                }\n\t            }\n\t            else {\n\t                this._state = ACTION.NONE;\n\t            }\n\t            endDragging();\n\t        };\n\t        const onMouseUp = () => {\n\t            const pointer = this._findPointerById(1);\n\t            if (pointer && pointer === this._lockedPointer)\n\t                return;\n\t            pointer && this._disposePointer(pointer);\n\t            this._state = ACTION.NONE;\n\t            endDragging();\n\t        };\n\t        let lastScrollTimeStamp = -1;\n\t        const onMouseWheel = (event) => {\n\t            if (!this._domElement)\n\t                return;\n\t            if (!this._enabled || this.mouseButtons.wheel === ACTION.NONE)\n\t                return;\n\t            if (this._interactiveArea.left !== 0 ||\n\t                this._interactiveArea.top !== 0 ||\n\t                this._interactiveArea.width !== 1 ||\n\t                this._interactiveArea.height !== 1) {\n\t                const elRect = this._domElement.getBoundingClientRect();\n\t                const left = event.clientX / elRect.width;\n\t                const top = event.clientY / elRect.height;\n\t                // check if the interactiveArea contains the drag start position.\n\t                if (left < this._interactiveArea.left ||\n\t                    left > this._interactiveArea.right ||\n\t                    top < this._interactiveArea.top ||\n\t                    top > this._interactiveArea.bottom)\n\t                    return;\n\t            }\n\t            event.preventDefault();\n\t            if (this.dollyToCursor ||\n\t                this.mouseButtons.wheel === ACTION.ROTATE ||\n\t                this.mouseButtons.wheel === ACTION.TRUCK) {\n\t                const now = performance.now();\n\t                // only need to fire this at scroll start.\n\t                if (lastScrollTimeStamp - now < 1000)\n\t                    this._getClientRect(this._elementRect);\n\t                lastScrollTimeStamp = now;\n\t            }\n\t            // Ref: https://github.com/cedricpinson/osgjs/blob/00e5a7e9d9206c06fdde0436e1d62ab7cb5ce853/sources/osgViewer/input/source/InputSourceMouse.js#L89-L103\n\t            const deltaYFactor = isMac ? -1 : -3;\n\t            const delta = (event.deltaMode === 1) ? event.deltaY / deltaYFactor : event.deltaY / (deltaYFactor * 10);\n\t            const x = this.dollyToCursor ? (event.clientX - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n\t            const y = this.dollyToCursor ? (event.clientY - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n\t            switch (this.mouseButtons.wheel) {\n\t                case ACTION.ROTATE: {\n\t                    this._rotateInternal(event.deltaX, event.deltaY);\n\t                    this._isUserControllingRotate = true;\n\t                    break;\n\t                }\n\t                case ACTION.TRUCK: {\n\t                    this._truckInternal(event.deltaX, event.deltaY, false);\n\t                    this._isUserControllingTruck = true;\n\t                    break;\n\t                }\n\t                case ACTION.OFFSET: {\n\t                    this._truckInternal(event.deltaX, event.deltaY, true);\n\t                    this._isUserControllingOffset = true;\n\t                    break;\n\t                }\n\t                case ACTION.DOLLY: {\n\t                    this._dollyInternal(-delta, x, y);\n\t                    this._isUserControllingDolly = true;\n\t                    break;\n\t                }\n\t                case ACTION.ZOOM: {\n\t                    this._zoomInternal(-delta, x, y);\n\t                    this._isUserControllingZoom = true;\n\t                    break;\n\t                }\n\t            }\n\t            this.dispatchEvent({ type: 'control' });\n\t        };\n\t        const onContextMenu = (event) => {\n\t            if (!this._domElement || !this._enabled)\n\t                return;\n\t            // contextmenu event is fired right after pointerdown/mousedown.\n\t            // remove attached handlers and active pointer, if interrupted by contextmenu.\n\t            if (this.mouseButtons.right === CameraControls.ACTION.NONE) {\n\t                const pointerId = event instanceof PointerEvent ? event.pointerId :\n\t                    event instanceof MouseEvent ? 0 :\n\t                        0;\n\t                const pointer = this._findPointerById(pointerId);\n\t                pointer && this._disposePointer(pointer);\n\t                // eslint-disable-next-line no-undef\n\t                this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n\t                this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n\t                this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n\t                this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n\t                return;\n\t            }\n\t            event.preventDefault();\n\t        };\n\t        const startDragging = (event) => {\n\t            if (!this._enabled)\n\t                return;\n\t            extractClientCoordFromEvent(this._activePointers, _v2);\n\t            this._getClientRect(this._elementRect);\n\t            dragStartPosition.copy(_v2);\n\t            lastDragPosition.copy(_v2);\n\t            const isMultiTouch = this._activePointers.length >= 2;\n\t            if (isMultiTouch) {\n\t                // 2 finger pinch\n\t                const dx = _v2.x - this._activePointers[1].clientX;\n\t                const dy = _v2.y - this._activePointers[1].clientY;\n\t                const distance = Math.sqrt(dx * dx + dy * dy);\n\t                dollyStart.set(0, distance);\n\t                // center coords of 2 finger truck\n\t                const x = (this._activePointers[0].clientX + this._activePointers[1].clientX) * 0.5;\n\t                const y = (this._activePointers[0].clientY + this._activePointers[1].clientY) * 0.5;\n\t                lastDragPosition.set(x, y);\n\t            }\n\t            this._state = 0;\n\t            if (!event) {\n\t                if (this._lockedPointer)\n\t                    this._state = this._state | this.mouseButtons.left;\n\t            }\n\t            else if ('pointerType' in event && event.pointerType === 'touch') {\n\t                switch (this._activePointers.length) {\n\t                    case 1:\n\t                        this._state = this.touches.one;\n\t                        break;\n\t                    case 2:\n\t                        this._state = this.touches.two;\n\t                        break;\n\t                    case 3:\n\t                        this._state = this.touches.three;\n\t                        break;\n\t                }\n\t            }\n\t            else {\n\t                if (!this._lockedPointer && (event.buttons & MOUSE_BUTTON.LEFT) === MOUSE_BUTTON.LEFT) {\n\t                    this._state = this._state | this.mouseButtons.left;\n\t                }\n\t                if ((event.buttons & MOUSE_BUTTON.MIDDLE) === MOUSE_BUTTON.MIDDLE) {\n\t                    this._state = this._state | this.mouseButtons.middle;\n\t                }\n\t                if ((event.buttons & MOUSE_BUTTON.RIGHT) === MOUSE_BUTTON.RIGHT) {\n\t                    this._state = this._state | this.mouseButtons.right;\n\t                }\n\t            }\n\t            // stop current movement on drag start\n\t            if ((this._state & ACTION.ROTATE) === ACTION.ROTATE ||\n\t                (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE ||\n\t                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n\t                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n\t                this._sphericalEnd.theta = this._spherical.theta;\n\t                this._sphericalEnd.phi = this._spherical.phi;\n\t                this._thetaVelocity.value = 0;\n\t                this._phiVelocity.value = 0;\n\t            }\n\t            if ((this._state & ACTION.TRUCK) === ACTION.TRUCK ||\n\t                (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK ||\n\t                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n\t                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n\t                this._targetEnd.copy(this._target);\n\t                this._targetVelocity.set(0, 0, 0);\n\t            }\n\t            if ((this._state & ACTION.DOLLY) === ACTION.DOLLY ||\n\t                (this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n\t                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n\t                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n\t                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE) {\n\t                this._sphericalEnd.radius = this._spherical.radius;\n\t                this._radiusVelocity.value = 0;\n\t            }\n\t            if ((this._state & ACTION.ZOOM) === ACTION.ZOOM ||\n\t                (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM ||\n\t                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK ||\n\t                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET ||\n\t                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n\t                this._zoomEnd = this._zoom;\n\t                this._zoomVelocity.value = 0;\n\t            }\n\t            if ((this._state & ACTION.OFFSET) === ACTION.OFFSET ||\n\t                (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET ||\n\t                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n\t                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n\t                this._focalOffsetEnd.copy(this._focalOffset);\n\t                this._focalOffsetVelocity.set(0, 0, 0);\n\t            }\n\t            this.dispatchEvent({ type: 'controlstart' });\n\t        };\n\t        const dragging = () => {\n\t            if (!this._enabled)\n\t                return;\n\t            extractClientCoordFromEvent(this._activePointers, _v2);\n\t            // When pointer lock is enabled clientX, clientY, screenX, and screenY remain 0.\n\t            // If pointer lock is enabled, use the Delta directory, and assume active-pointer is not multiple.\n\t            const isPointerLockActive = this._domElement && document.pointerLockElement === this._domElement;\n\t            const lockedPointer = isPointerLockActive ? this._lockedPointer || this._activePointers[0] : null;\n\t            const deltaX = lockedPointer ? -lockedPointer.deltaX : lastDragPosition.x - _v2.x;\n\t            const deltaY = lockedPointer ? -lockedPointer.deltaY : lastDragPosition.y - _v2.y;\n\t            lastDragPosition.copy(_v2);\n\t            if ((this._state & ACTION.ROTATE) === ACTION.ROTATE ||\n\t                (this._state & ACTION.TOUCH_ROTATE) === ACTION.TOUCH_ROTATE ||\n\t                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n\t                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n\t                this._rotateInternal(deltaX, deltaY);\n\t                this._isUserControllingRotate = true;\n\t            }\n\t            if ((this._state & ACTION.DOLLY) === ACTION.DOLLY ||\n\t                (this._state & ACTION.ZOOM) === ACTION.ZOOM) {\n\t                const dollyX = this.dollyToCursor ? (dragStartPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n\t                const dollyY = this.dollyToCursor ? (dragStartPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n\t                const dollyDirection = this.dollyDragInverted ? -1 : 1;\n\t                if ((this._state & ACTION.DOLLY) === ACTION.DOLLY) {\n\t                    this._dollyInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n\t                    this._isUserControllingDolly = true;\n\t                }\n\t                else {\n\t                    this._zoomInternal(dollyDirection * deltaY * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n\t                    this._isUserControllingZoom = true;\n\t                }\n\t            }\n\t            if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n\t                (this._state & ACTION.TOUCH_ZOOM) === ACTION.TOUCH_ZOOM ||\n\t                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n\t                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK ||\n\t                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n\t                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET ||\n\t                (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n\t                (this._state & ACTION.TOUCH_ZOOM_ROTATE) === ACTION.TOUCH_ZOOM_ROTATE) {\n\t                const dx = _v2.x - this._activePointers[1].clientX;\n\t                const dy = _v2.y - this._activePointers[1].clientY;\n\t                const distance = Math.sqrt(dx * dx + dy * dy);\n\t                const dollyDelta = dollyStart.y - distance;\n\t                dollyStart.set(0, distance);\n\t                const dollyX = this.dollyToCursor ? (lastDragPosition.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0;\n\t                const dollyY = this.dollyToCursor ? (lastDragPosition.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n\t                if ((this._state & ACTION.TOUCH_DOLLY) === ACTION.TOUCH_DOLLY ||\n\t                    (this._state & ACTION.TOUCH_DOLLY_ROTATE) === ACTION.TOUCH_DOLLY_ROTATE ||\n\t                    (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n\t                    (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET) {\n\t                    this._dollyInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n\t                    this._isUserControllingDolly = true;\n\t                }\n\t                else {\n\t                    this._zoomInternal(dollyDelta * TOUCH_DOLLY_FACTOR, dollyX, dollyY);\n\t                    this._isUserControllingZoom = true;\n\t                }\n\t            }\n\t            if ((this._state & ACTION.TRUCK) === ACTION.TRUCK ||\n\t                (this._state & ACTION.TOUCH_TRUCK) === ACTION.TOUCH_TRUCK ||\n\t                (this._state & ACTION.TOUCH_DOLLY_TRUCK) === ACTION.TOUCH_DOLLY_TRUCK ||\n\t                (this._state & ACTION.TOUCH_ZOOM_TRUCK) === ACTION.TOUCH_ZOOM_TRUCK) {\n\t                this._truckInternal(deltaX, deltaY, false);\n\t                this._isUserControllingTruck = true;\n\t            }\n\t            if ((this._state & ACTION.OFFSET) === ACTION.OFFSET ||\n\t                (this._state & ACTION.TOUCH_OFFSET) === ACTION.TOUCH_OFFSET ||\n\t                (this._state & ACTION.TOUCH_DOLLY_OFFSET) === ACTION.TOUCH_DOLLY_OFFSET ||\n\t                (this._state & ACTION.TOUCH_ZOOM_OFFSET) === ACTION.TOUCH_ZOOM_OFFSET) {\n\t                this._truckInternal(deltaX, deltaY, true);\n\t                this._isUserControllingOffset = true;\n\t            }\n\t            this.dispatchEvent({ type: 'control' });\n\t        };\n\t        const endDragging = () => {\n\t            extractClientCoordFromEvent(this._activePointers, _v2);\n\t            lastDragPosition.copy(_v2);\n\t            if (this._activePointers.length === 0 ||\n\t                (this._activePointers.length === 1 && this._activePointers[0] === this._lockedPointer)) {\n\t                this._isDragging = false;\n\t            }\n\t            if (this._activePointers.length === 0 && this._domElement) {\n\t                // eslint-disable-next-line no-undef\n\t                this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n\t                this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n\t                this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n\t                this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n\t                this.dispatchEvent({ type: 'controlend' });\n\t            }\n\t        };\n\t        this.lockPointer = () => {\n\t            if (!this._enabled || !this._domElement)\n\t                return;\n\t            this.cancel();\n\t            // Element.requestPointerLock is allowed to happen without any pointer active - create a faux one for compatibility with controls\n\t            this._lockedPointer = {\n\t                pointerId: -1,\n\t                clientX: 0,\n\t                clientY: 0,\n\t                deltaX: 0,\n\t                deltaY: 0,\n\t                mouseButton: null,\n\t            };\n\t            this._activePointers.push(this._lockedPointer);\n\t            // eslint-disable-next-line no-undef\n\t            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n\t            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n\t            this._domElement.requestPointerLock();\n\t            this._domElement.ownerDocument.addEventListener('pointerlockchange', onPointerLockChange);\n\t            this._domElement.ownerDocument.addEventListener('pointerlockerror', onPointerLockError);\n\t            this._domElement.ownerDocument.addEventListener('pointermove', onPointerMove, { passive: false });\n\t            this._domElement.ownerDocument.addEventListener('pointerup', onPointerUp);\n\t            startDragging();\n\t        };\n\t        this.unlockPointer = () => {\n\t            if (this._lockedPointer !== null) {\n\t                this._disposePointer(this._lockedPointer);\n\t                this._lockedPointer = null;\n\t            }\n\t            document.exitPointerLock();\n\t            this.cancel();\n\t            if (!this._domElement)\n\t                return;\n\t            this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n\t            this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n\t        };\n\t        const onPointerLockChange = () => {\n\t            const isPointerLockActive = this._domElement && this._domElement.ownerDocument.pointerLockElement === this._domElement;\n\t            if (!isPointerLockActive)\n\t                this.unlockPointer();\n\t        };\n\t        const onPointerLockError = () => {\n\t            this.unlockPointer();\n\t        };\n\t        this._addAllEventListeners = (domElement) => {\n\t            this._domElement = domElement;\n\t            this._domElement.style.touchAction = 'none';\n\t            this._domElement.style.userSelect = 'none';\n\t            this._domElement.style.webkitUserSelect = 'none';\n\t            this._domElement.addEventListener('pointerdown', onPointerDown);\n\t            isPointerEventsNotSupported && this._domElement.addEventListener('mousedown', onMouseDown);\n\t            this._domElement.addEventListener('pointercancel', onPointerUp);\n\t            this._domElement.addEventListener('wheel', onMouseWheel, { passive: false });\n\t            this._domElement.addEventListener('contextmenu', onContextMenu);\n\t        };\n\t        this._removeAllEventListeners = () => {\n\t            if (!this._domElement)\n\t                return;\n\t            this._domElement.style.touchAction = '';\n\t            this._domElement.style.userSelect = '';\n\t            this._domElement.style.webkitUserSelect = '';\n\t            this._domElement.removeEventListener('pointerdown', onPointerDown);\n\t            this._domElement.removeEventListener('mousedown', onMouseDown);\n\t            this._domElement.removeEventListener('pointercancel', onPointerUp);\n\t            // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#matching_event_listeners_for_removal\n\t            // > it's probably wise to use the same values used for the call to `addEventListener()` when calling `removeEventListener()`\n\t            // see https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n\t            // eslint-disable-next-line no-undef\n\t            this._domElement.removeEventListener('wheel', onMouseWheel, { passive: false });\n\t            this._domElement.removeEventListener('contextmenu', onContextMenu);\n\t            // eslint-disable-next-line no-undef\n\t            this._domElement.ownerDocument.removeEventListener('pointermove', onPointerMove, { passive: false });\n\t            this._domElement.ownerDocument.removeEventListener('mousemove', onMouseMove);\n\t            this._domElement.ownerDocument.removeEventListener('pointerup', onPointerUp);\n\t            this._domElement.ownerDocument.removeEventListener('mouseup', onMouseUp);\n\t            this._domElement.ownerDocument.removeEventListener('pointerlockchange', onPointerLockChange);\n\t            this._domElement.ownerDocument.removeEventListener('pointerlockerror', onPointerLockError);\n\t        };\n\t        this.cancel = () => {\n\t            if (this._state === ACTION.NONE)\n\t                return;\n\t            this._state = ACTION.NONE;\n\t            this._activePointers.length = 0;\n\t            endDragging();\n\t        };\n\t        if (domElement)\n\t            this.connect(domElement);\n\t        this.update(0);\n\t    }\n\t    /**\n\t     * The camera to be controlled\n\t     * @category Properties\n\t     */\n\t    get camera() {\n\t        return this._camera;\n\t    }\n\t    set camera(camera) {\n\t        this._camera = camera;\n\t        this.updateCameraUp();\n\t        this._camera.updateProjectionMatrix();\n\t        this._updateNearPlaneCorners();\n\t        this._needsUpdate = true;\n\t    }\n\t    /**\n\t     * Whether or not the controls are enabled.\n\t     * `false` to disable user dragging/touch-move, but all methods works.\n\t     * @category Properties\n\t     */\n\t    get enabled() {\n\t        return this._enabled;\n\t    }\n\t    set enabled(enabled) {\n\t        this._enabled = enabled;\n\t        if (!this._domElement)\n\t            return;\n\t        if (enabled) {\n\t            this._domElement.style.touchAction = 'none';\n\t            this._domElement.style.userSelect = 'none';\n\t            this._domElement.style.webkitUserSelect = 'none';\n\t        }\n\t        else {\n\t            this.cancel();\n\t            this._domElement.style.touchAction = '';\n\t            this._domElement.style.userSelect = '';\n\t            this._domElement.style.webkitUserSelect = '';\n\t        }\n\t    }\n\t    /**\n\t     * Returns `true` if the controls are active updating.\n\t     * readonly value.\n\t     * @category Properties\n\t     */\n\t    get active() {\n\t        return !this._hasRested;\n\t    }\n\t    /**\n\t     * Getter for the current `ACTION`.\n\t     * readonly value.\n\t     * @category Properties\n\t     */\n\t    get currentAction() {\n\t        return this._state;\n\t    }\n\t    /**\n\t     * get/set Current distance.\n\t     * @category Properties\n\t     */\n\t    get distance() {\n\t        return this._spherical.radius;\n\t    }\n\t    set distance(distance) {\n\t        if (this._spherical.radius === distance &&\n\t            this._sphericalEnd.radius === distance)\n\t            return;\n\t        this._spherical.radius = distance;\n\t        this._sphericalEnd.radius = distance;\n\t        this._needsUpdate = true;\n\t    }\n\t    // horizontal angle\n\t    /**\n\t     * get/set the azimuth angle (horizontal) in radians.\n\t     * Every 360 degrees turn is added to `.azimuthAngle` value, which is accumulative.\n\t     * @category Properties\n\t     */\n\t    get azimuthAngle() {\n\t        return this._spherical.theta;\n\t    }\n\t    set azimuthAngle(azimuthAngle) {\n\t        if (this._spherical.theta === azimuthAngle &&\n\t            this._sphericalEnd.theta === azimuthAngle)\n\t            return;\n\t        this._spherical.theta = azimuthAngle;\n\t        this._sphericalEnd.theta = azimuthAngle;\n\t        this._needsUpdate = true;\n\t    }\n\t    // vertical angle\n\t    /**\n\t     * get/set the polar angle (vertical) in radians.\n\t     * @category Properties\n\t     */\n\t    get polarAngle() {\n\t        return this._spherical.phi;\n\t    }\n\t    set polarAngle(polarAngle) {\n\t        if (this._spherical.phi === polarAngle &&\n\t            this._sphericalEnd.phi === polarAngle)\n\t            return;\n\t        this._spherical.phi = polarAngle;\n\t        this._sphericalEnd.phi = polarAngle;\n\t        this._needsUpdate = true;\n\t    }\n\t    /**\n\t     * Whether camera position should be enclosed in the boundary or not.\n\t     * @category Properties\n\t     */\n\t    get boundaryEnclosesCamera() {\n\t        return this._boundaryEnclosesCamera;\n\t    }\n\t    set boundaryEnclosesCamera(boundaryEnclosesCamera) {\n\t        this._boundaryEnclosesCamera = boundaryEnclosesCamera;\n\t        this._needsUpdate = true;\n\t    }\n\t    /**\n\t     * Set drag-start, touches and wheel enable area in the domElement.\n\t     * each values are between `0` and `1` inclusive, where `0` is left/top and `1` is right/bottom of the screen.\n\t     * e.g. `{ x: 0, y: 0, width: 1, height: 1 }` for entire area.\n\t     * @category Properties\n\t     */\n\t    set interactiveArea(interactiveArea) {\n\t        this._interactiveArea.width = clamp(interactiveArea.width, 0, 1);\n\t        this._interactiveArea.height = clamp(interactiveArea.height, 0, 1);\n\t        this._interactiveArea.x = clamp(interactiveArea.x, 0, 1 - this._interactiveArea.width);\n\t        this._interactiveArea.y = clamp(interactiveArea.x, 0, 1 - this._interactiveArea.height);\n\t    }\n\t    /**\n\t     * Adds the specified event listener.\n\t     * Applicable event types (which is `K`) are:\n\t     * | Event name          | Timing |\n\t     * | ------------------- | ------ |\n\t     * | `'controlstart'`    | When the user starts to control the camera via mouse / touches. ¹ |\n\t     * | `'control'`         | When the user controls the camera (dragging). |\n\t     * | `'controlend'`      | When the user ends to control the camera. ¹ |\n\t     * | `'transitionstart'` | When any kind of transition starts, either user control or using a method with `enableTransition = true` |\n\t     * | `'update'`          | When the camera position is updated. |\n\t     * | `'wake'`            | When the camera starts moving. |\n\t     * | `'rest'`            | When the camera movement is below `.restThreshold` ². |\n\t     * | `'sleep'`           | When the camera end moving. |\n\t     *\n\t     * 1. `mouseButtons.wheel` (Mouse wheel control) does not emit `'controlstart'` and `'controlend'`. `mouseButtons.wheel` uses scroll-event internally, and scroll-event happens intermittently. That means \"start\" and \"end\" cannot be detected.\n\t     * 2. Due to damping, `sleep` will usually fire a few seconds after the camera _appears_ to have stopped moving. If you want to do something (e.g. enable UI, perform another transition) at the point when the camera has stopped, you probably want the `rest` event. This can be fine tuned using the `.restThreshold` parameter. See the [Rest and Sleep Example](https://yomotsu.github.io/camera-controls/examples/rest-and-sleep.html).\n\t     *\n\t     * e.g.\n\t     * ```\n\t     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n\t     * ```\n\t     * @param type event name\n\t     * @param listener handler function\n\t     * @category Methods\n\t     */\n\t    addEventListener(type, listener) {\n\t        super.addEventListener(type, listener);\n\t    }\n\t    /**\n\t     * Removes the specified event listener\n\t     * e.g.\n\t     * ```\n\t     * cameraControl.addEventListener( 'controlstart', myCallbackFunction );\n\t     * ```\n\t     * @param type event name\n\t     * @param listener handler function\n\t     * @category Methods\n\t     */\n\t    removeEventListener(type, listener) {\n\t        super.removeEventListener(type, listener);\n\t    }\n\t    /**\n\t     * Rotate azimuthal angle(horizontal) and polar angle(vertical).\n\t     * Every value is added to the current value.\n\t     * @param azimuthAngle Azimuth rotate angle. In radian.\n\t     * @param polarAngle Polar rotate angle. In radian.\n\t     * @param enableTransition Whether to move smoothly or immediately\n\t     * @category Methods\n\t     */\n\t    rotate(azimuthAngle, polarAngle, enableTransition = false) {\n\t        return this.rotateTo(this._sphericalEnd.theta + azimuthAngle, this._sphericalEnd.phi + polarAngle, enableTransition);\n\t    }\n\t    /**\n\t     * Rotate azimuthal angle(horizontal) to the given angle and keep the same polar angle(vertical) target.\n\t     *\n\t     * e.g.\n\t     * ```\n\t     * cameraControls.rotateAzimuthTo( 30 * THREE.MathUtils.DEG2RAD, true );\n\t     * ```\n\t     * @param azimuthAngle Azimuth rotate angle. In radian.\n\t     * @param enableTransition Whether to move smoothly or immediately\n\t     * @category Methods\n\t     */\n\t    rotateAzimuthTo(azimuthAngle, enableTransition = false) {\n\t        return this.rotateTo(azimuthAngle, this._sphericalEnd.phi, enableTransition);\n\t    }\n\t    /**\n\t     * Rotate polar angle(vertical) to the given angle and keep the same azimuthal angle(horizontal) target.\n\t     *\n\t     * e.g.\n\t     * ```\n\t     * cameraControls.rotatePolarTo( 30 * THREE.MathUtils.DEG2RAD, true );\n\t     * ```\n\t     * @param polarAngle Polar rotate angle. In radian.\n\t     * @param enableTransition Whether to move smoothly or immediately\n\t     * @category Methods\n\t     */\n\t    rotatePolarTo(polarAngle, enableTransition = false) {\n\t        return this.rotateTo(this._sphericalEnd.theta, polarAngle, enableTransition);\n\t    }\n\t    /**\n\t     * Rotate azimuthal angle(horizontal) and polar angle(vertical) to the given angle.\n\t     * Camera view will rotate over the orbit pivot absolutely:\n\t     *\n\t     * azimuthAngle\n\t     * ```\n\t     *       0º\n\t     *         \\\n\t     * 90º -----+----- -90º\n\t     *           \\\n\t     *           180º\n\t     * ```\n\t     * | direction | angle                  |\n\t     * | --------- | ---------------------- |\n\t     * | front     | 0º                     |\n\t     * | left      | 90º (`Math.PI / 2`)    |\n\t     * | right     | -90º (`- Math.PI / 2`) |\n\t     * | back      | 180º (`Math.PI`)       |\n\t     *\n\t     * polarAngle\n\t     * ```\n\t     *     180º\n\t     *      |\n\t     *      90º\n\t     *      |\n\t     *      0º\n\t     * ```\n\t     * | direction            | angle                  |\n\t     * | -------------------- | ---------------------- |\n\t     * | top/sky              | 180º (`Math.PI`)       |\n\t     * | horizontal from view | 90º (`Math.PI / 2`)    |\n\t     * | bottom/floor         | 0º                     |\n\t     *\n\t     * @param azimuthAngle Azimuth rotate angle to. In radian.\n\t     * @param polarAngle Polar rotate angle to. In radian.\n\t     * @param enableTransition  Whether to move smoothly or immediately\n\t     * @category Methods\n\t     */\n\t    rotateTo(azimuthAngle, polarAngle, enableTransition = false) {\n\t        this._isUserControllingRotate = false;\n\t        const theta = clamp(azimuthAngle, this.minAzimuthAngle, this.maxAzimuthAngle);\n\t        const phi = clamp(polarAngle, this.minPolarAngle, this.maxPolarAngle);\n\t        this._sphericalEnd.theta = theta;\n\t        this._sphericalEnd.phi = phi;\n\t        this._sphericalEnd.makeSafe();\n\t        this._needsUpdate = true;\n\t        if (!enableTransition) {\n\t            this._spherical.theta = this._sphericalEnd.theta;\n\t            this._spherical.phi = this._sphericalEnd.phi;\n\t        }\n\t        const resolveImmediately = !enableTransition ||\n\t            approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n\t                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);\n\t        return this._createOnRestPromise(resolveImmediately);\n\t    }\n\t    /**\n\t     * Dolly in/out camera position.\n\t     * @param distance Distance of dollyIn. Negative number for dollyOut.\n\t     * @param enableTransition Whether to move smoothly or immediately.\n\t     * @category Methods\n\t     */\n\t    dolly(distance, enableTransition = false) {\n\t        return this.dollyTo(this._sphericalEnd.radius - distance, enableTransition);\n\t    }\n\t    /**\n\t     * Dolly in/out camera position to given distance.\n\t     * @param distance Distance of dolly.\n\t     * @param enableTransition Whether to move smoothly or immediately.\n\t     * @category Methods\n\t     */\n\t    dollyTo(distance, enableTransition = false) {\n\t        this._isUserControllingDolly = false;\n\t        this._lastDollyDirection = DOLLY_DIRECTION.NONE;\n\t        this._changedDolly = 0;\n\t        return this._dollyToNoClamp(clamp(distance, this.minDistance, this.maxDistance), enableTransition);\n\t    }\n\t    _dollyToNoClamp(distance, enableTransition = false) {\n\t        const lastRadius = this._sphericalEnd.radius;\n\t        const hasCollider = this.colliderMeshes.length >= 1;\n\t        if (hasCollider) {\n\t            const maxDistanceByCollisionTest = this._collisionTest();\n\t            const isCollided = approxEquals(maxDistanceByCollisionTest, this._spherical.radius);\n\t            const isDollyIn = lastRadius > distance;\n\t            if (!isDollyIn && isCollided)\n\t                return Promise.resolve();\n\t            this._sphericalEnd.radius = Math.min(distance, maxDistanceByCollisionTest);\n\t        }\n\t        else {\n\t            this._sphericalEnd.radius = distance;\n\t        }\n\t        this._needsUpdate = true;\n\t        if (!enableTransition) {\n\t            this._spherical.radius = this._sphericalEnd.radius;\n\t        }\n\t        const resolveImmediately = !enableTransition || approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n\t        return this._createOnRestPromise(resolveImmediately);\n\t    }\n\t    /**\n\t     * Dolly in, but does not change the distance between the target and the camera, and moves the target position instead.\n\t     * Specify a negative value for dolly out.\n\t     * @param distance Distance of dolly.\n\t     * @param enableTransition Whether to move smoothly or immediately.\n\t     * @category Methods\n\t     */\n\t    dollyInFixed(distance, enableTransition = false) {\n\t        this._targetEnd.add(this._getCameraDirection(_cameraDirection).multiplyScalar(distance));\n\t        if (!enableTransition) {\n\t            this._target.copy(this._targetEnd);\n\t        }\n\t        const resolveImmediately = !enableTransition ||\n\t            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n\t                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n\t                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);\n\t        return this._createOnRestPromise(resolveImmediately);\n\t    }\n\t    /**\n\t     * Zoom in/out camera. The value is added to camera zoom.\n\t     * Limits set with `.minZoom` and `.maxZoom`\n\t     * @param zoomStep zoom scale\n\t     * @param enableTransition Whether to move smoothly or immediately\n\t     * @category Methods\n\t     */\n\t    zoom(zoomStep, enableTransition = false) {\n\t        return this.zoomTo(this._zoomEnd + zoomStep, enableTransition);\n\t    }\n\t    /**\n\t     * Zoom in/out camera to given scale. The value overwrites camera zoom.\n\t     * Limits set with .minZoom and .maxZoom\n\t     * @param zoom\n\t     * @param enableTransition\n\t     * @category Methods\n\t     */\n\t    zoomTo(zoom, enableTransition = false) {\n\t        this._isUserControllingZoom = false;\n\t        this._zoomEnd = clamp(zoom, this.minZoom, this.maxZoom);\n\t        this._needsUpdate = true;\n\t        if (!enableTransition) {\n\t            this._zoom = this._zoomEnd;\n\t        }\n\t        const resolveImmediately = !enableTransition || approxEquals(this._zoom, this._zoomEnd, this.restThreshold);\n\t        this._changedZoom = 0;\n\t        return this._createOnRestPromise(resolveImmediately);\n\t    }\n\t    /**\n\t     * @deprecated `pan()` has been renamed to `truck()`\n\t     * @category Methods\n\t     */\n\t    pan(x, y, enableTransition = false) {\n\t        console.warn('`pan` has been renamed to `truck`');\n\t        return this.truck(x, y, enableTransition);\n\t    }\n\t    /**\n\t     * Truck and pedestal camera using current azimuthal angle\n\t     * @param x Horizontal translate amount\n\t     * @param y Vertical translate amount\n\t     * @param enableTransition Whether to move smoothly or immediately\n\t     * @category Methods\n\t     */\n\t    truck(x, y, enableTransition = false) {\n\t        this._camera.updateMatrix();\n\t        _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n\t        _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n\t        _xColumn.multiplyScalar(x);\n\t        _yColumn.multiplyScalar(-y);\n\t        const offset = _v3A.copy(_xColumn).add(_yColumn);\n\t        const to = _v3B.copy(this._targetEnd).add(offset);\n\t        return this.moveTo(to.x, to.y, to.z, enableTransition);\n\t    }\n\t    /**\n\t     * Move forward / backward.\n\t     * @param distance Amount to move forward / backward. Negative value to move backward\n\t     * @param enableTransition Whether to move smoothly or immediately\n\t     * @category Methods\n\t     */\n\t    forward(distance, enableTransition = false) {\n\t        _v3A.setFromMatrixColumn(this._camera.matrix, 0);\n\t        _v3A.crossVectors(this._camera.up, _v3A);\n\t        _v3A.multiplyScalar(distance);\n\t        const to = _v3B.copy(this._targetEnd).add(_v3A);\n\t        return this.moveTo(to.x, to.y, to.z, enableTransition);\n\t    }\n\t    /**\n\t     * Move up / down.\n\t     * @param height Amount to move up / down. Negative value to move down\n\t     * @param enableTransition Whether to move smoothly or immediately\n\t     * @category Methods\n\t     */\n\t    elevate(height, enableTransition = false) {\n\t        _v3A.copy(this._camera.up).multiplyScalar(height);\n\t        return this.moveTo(this._targetEnd.x + _v3A.x, this._targetEnd.y + _v3A.y, this._targetEnd.z + _v3A.z, enableTransition);\n\t    }\n\t    /**\n\t     * Move target position to given point.\n\t     * @param x x coord to move center position\n\t     * @param y y coord to move center position\n\t     * @param z z coord to move center position\n\t     * @param enableTransition Whether to move smoothly or immediately\n\t     * @category Methods\n\t     */\n\t    moveTo(x, y, z, enableTransition = false) {\n\t        this._isUserControllingTruck = false;\n\t        const offset = _v3A.set(x, y, z).sub(this._targetEnd);\n\t        this._encloseToBoundary(this._targetEnd, offset, this.boundaryFriction);\n\t        this._needsUpdate = true;\n\t        if (!enableTransition) {\n\t            this._target.copy(this._targetEnd);\n\t        }\n\t        const resolveImmediately = !enableTransition ||\n\t            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n\t                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n\t                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold);\n\t        return this._createOnRestPromise(resolveImmediately);\n\t    }\n\t    /**\n\t     * Look in the given point direction.\n\t     * @param x point x.\n\t     * @param y point y.\n\t     * @param z point z.\n\t     * @param enableTransition Whether to move smoothly or immediately.\n\t     * @returns Transition end promise\n\t     * @category Methods\n\t     */\n\t    lookInDirectionOf(x, y, z, enableTransition = false) {\n\t        const point = _v3A.set(x, y, z);\n\t        const direction = point.sub(this._targetEnd).normalize();\n\t        const position = direction.multiplyScalar(-this._sphericalEnd.radius);\n\t        return this.setPosition(position.x, position.y, position.z, enableTransition);\n\t    }\n\t    /**\n\t     * Fit the viewport to the box or the bounding box of the object, using the nearest axis. paddings are in unit.\n\t     * set `cover: true` to fill enter screen.\n\t     * e.g.\n\t     * ```\n\t     * cameraControls.fitToBox( myMesh );\n\t     * ```\n\t     * @param box3OrObject Axis aligned bounding box to fit the view.\n\t     * @param enableTransition Whether to move smoothly or immediately.\n\t     * @param options | `<object>` { cover: boolean, paddingTop: number, paddingLeft: number, paddingBottom: number, paddingRight: number }\n\t     * @returns Transition end promise\n\t     * @category Methods\n\t     */\n\t    fitToBox(box3OrObject, enableTransition, { cover = false, paddingLeft = 0, paddingRight = 0, paddingBottom = 0, paddingTop = 0 } = {}) {\n\t        const promises = [];\n\t        const aabb = box3OrObject.isBox3\n\t            ? _box3A.copy(box3OrObject)\n\t            : _box3A.setFromObject(box3OrObject);\n\t        if (aabb.isEmpty()) {\n\t            console.warn('camera-controls: fitTo() cannot be used with an empty box. Aborting');\n\t            Promise.resolve();\n\t        }\n\t        // round to closest axis ( forward | backward | right | left | top | bottom )\n\t        const theta = roundToStep(this._sphericalEnd.theta, PI_HALF);\n\t        const phi = roundToStep(this._sphericalEnd.phi, PI_HALF);\n\t        promises.push(this.rotateTo(theta, phi, enableTransition));\n\t        const normal = _v3A.setFromSpherical(this._sphericalEnd).normalize();\n\t        const rotation = _quaternionA.setFromUnitVectors(normal, _AXIS_Z);\n\t        const viewFromPolar = approxEquals(Math.abs(normal.y), 1);\n\t        if (viewFromPolar) {\n\t            rotation.multiply(_quaternionB.setFromAxisAngle(_AXIS_Y, theta));\n\t        }\n\t        rotation.multiply(this._yAxisUpSpaceInverse);\n\t        // make oriented bounding box\n\t        const bb = _box3B.makeEmpty();\n\t        // left bottom back corner\n\t        _v3B.copy(aabb.min).applyQuaternion(rotation);\n\t        bb.expandByPoint(_v3B);\n\t        // right bottom back corner\n\t        _v3B.copy(aabb.min).setX(aabb.max.x).applyQuaternion(rotation);\n\t        bb.expandByPoint(_v3B);\n\t        // left top back corner\n\t        _v3B.copy(aabb.min).setY(aabb.max.y).applyQuaternion(rotation);\n\t        bb.expandByPoint(_v3B);\n\t        // right top back corner\n\t        _v3B.copy(aabb.max).setZ(aabb.min.z).applyQuaternion(rotation);\n\t        bb.expandByPoint(_v3B);\n\t        // left bottom front corner\n\t        _v3B.copy(aabb.min).setZ(aabb.max.z).applyQuaternion(rotation);\n\t        bb.expandByPoint(_v3B);\n\t        // right bottom front corner\n\t        _v3B.copy(aabb.max).setY(aabb.min.y).applyQuaternion(rotation);\n\t        bb.expandByPoint(_v3B);\n\t        // left top front corner\n\t        _v3B.copy(aabb.max).setX(aabb.min.x).applyQuaternion(rotation);\n\t        bb.expandByPoint(_v3B);\n\t        // right top front corner\n\t        _v3B.copy(aabb.max).applyQuaternion(rotation);\n\t        bb.expandByPoint(_v3B);\n\t        // add padding\n\t        bb.min.x -= paddingLeft;\n\t        bb.min.y -= paddingBottom;\n\t        bb.max.x += paddingRight;\n\t        bb.max.y += paddingTop;\n\t        rotation.setFromUnitVectors(_AXIS_Z, normal);\n\t        if (viewFromPolar) {\n\t            rotation.premultiply(_quaternionB.invert());\n\t        }\n\t        rotation.premultiply(this._yAxisUpSpace);\n\t        const bbSize = bb.getSize(_v3A);\n\t        const center = bb.getCenter(_v3B).applyQuaternion(rotation);\n\t        if (isPerspectiveCamera(this._camera)) {\n\t            const distance = this.getDistanceToFitBox(bbSize.x, bbSize.y, bbSize.z, cover);\n\t            promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n\t            promises.push(this.dollyTo(distance, enableTransition));\n\t            promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n\t        }\n\t        else if (isOrthographicCamera(this._camera)) {\n\t            const camera = this._camera;\n\t            const width = camera.right - camera.left;\n\t            const height = camera.top - camera.bottom;\n\t            const zoom = cover ? Math.max(width / bbSize.x, height / bbSize.y) : Math.min(width / bbSize.x, height / bbSize.y);\n\t            promises.push(this.moveTo(center.x, center.y, center.z, enableTransition));\n\t            promises.push(this.zoomTo(zoom, enableTransition));\n\t            promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n\t        }\n\t        return Promise.all(promises);\n\t    }\n\t    /**\n\t     * Fit the viewport to the sphere or the bounding sphere of the object.\n\t     * @param sphereOrMesh\n\t     * @param enableTransition\n\t     * @category Methods\n\t     */\n\t    fitToSphere(sphereOrMesh, enableTransition) {\n\t        const promises = [];\n\t        const isSphere = sphereOrMesh instanceof THREE.Sphere;\n\t        const boundingSphere = isSphere ?\n\t            _sphere.copy(sphereOrMesh) :\n\t            CameraControls.createBoundingSphere(sphereOrMesh, _sphere);\n\t        promises.push(this.moveTo(boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z, enableTransition));\n\t        if (isPerspectiveCamera(this._camera)) {\n\t            const distanceToFit = this.getDistanceToFitSphere(boundingSphere.radius);\n\t            promises.push(this.dollyTo(distanceToFit, enableTransition));\n\t        }\n\t        else if (isOrthographicCamera(this._camera)) {\n\t            const width = this._camera.right - this._camera.left;\n\t            const height = this._camera.top - this._camera.bottom;\n\t            const diameter = 2 * boundingSphere.radius;\n\t            const zoom = Math.min(width / diameter, height / diameter);\n\t            promises.push(this.zoomTo(zoom, enableTransition));\n\t        }\n\t        promises.push(this.setFocalOffset(0, 0, 0, enableTransition));\n\t        return Promise.all(promises);\n\t    }\n\t    /**\n\t     * Look at the `target` from the `position`.\n\t     * @param positionX\n\t     * @param positionY\n\t     * @param positionZ\n\t     * @param targetX\n\t     * @param targetY\n\t     * @param targetZ\n\t     * @param enableTransition\n\t     * @category Methods\n\t     */\n\t    setLookAt(positionX, positionY, positionZ, targetX, targetY, targetZ, enableTransition = false) {\n\t        this._isUserControllingRotate = false;\n\t        this._isUserControllingDolly = false;\n\t        this._isUserControllingTruck = false;\n\t        this._lastDollyDirection = DOLLY_DIRECTION.NONE;\n\t        this._changedDolly = 0;\n\t        const target = _v3B.set(targetX, targetY, targetZ);\n\t        const position = _v3A.set(positionX, positionY, positionZ);\n\t        this._targetEnd.copy(target);\n\t        this._sphericalEnd.setFromVector3(position.sub(target).applyQuaternion(this._yAxisUpSpace));\n\t        this.normalizeRotations();\n\t        this._needsUpdate = true;\n\t        if (!enableTransition) {\n\t            this._target.copy(this._targetEnd);\n\t            this._spherical.copy(this._sphericalEnd);\n\t        }\n\t        const resolveImmediately = !enableTransition ||\n\t            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n\t                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n\t                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) &&\n\t                approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n\t                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) &&\n\t                approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n\t        return this._createOnRestPromise(resolveImmediately);\n\t    }\n\t    /**\n\t     * Similar to setLookAt, but it interpolates between two states.\n\t     * @param positionAX\n\t     * @param positionAY\n\t     * @param positionAZ\n\t     * @param targetAX\n\t     * @param targetAY\n\t     * @param targetAZ\n\t     * @param positionBX\n\t     * @param positionBY\n\t     * @param positionBZ\n\t     * @param targetBX\n\t     * @param targetBY\n\t     * @param targetBZ\n\t     * @param t\n\t     * @param enableTransition\n\t     * @category Methods\n\t     */\n\t    lerpLookAt(positionAX, positionAY, positionAZ, targetAX, targetAY, targetAZ, positionBX, positionBY, positionBZ, targetBX, targetBY, targetBZ, t, enableTransition = false) {\n\t        this._isUserControllingRotate = false;\n\t        this._isUserControllingDolly = false;\n\t        this._isUserControllingTruck = false;\n\t        this._lastDollyDirection = DOLLY_DIRECTION.NONE;\n\t        this._changedDolly = 0;\n\t        const targetA = _v3A.set(targetAX, targetAY, targetAZ);\n\t        const positionA = _v3B.set(positionAX, positionAY, positionAZ);\n\t        _sphericalA.setFromVector3(positionA.sub(targetA).applyQuaternion(this._yAxisUpSpace));\n\t        const targetB = _v3C.set(targetBX, targetBY, targetBZ);\n\t        const positionB = _v3B.set(positionBX, positionBY, positionBZ);\n\t        _sphericalB.setFromVector3(positionB.sub(targetB).applyQuaternion(this._yAxisUpSpace));\n\t        this._targetEnd.copy(targetA.lerp(targetB, t)); // tricky\n\t        const deltaTheta = _sphericalB.theta - _sphericalA.theta;\n\t        const deltaPhi = _sphericalB.phi - _sphericalA.phi;\n\t        const deltaRadius = _sphericalB.radius - _sphericalA.radius;\n\t        this._sphericalEnd.set(_sphericalA.radius + deltaRadius * t, _sphericalA.phi + deltaPhi * t, _sphericalA.theta + deltaTheta * t);\n\t        this.normalizeRotations();\n\t        this._needsUpdate = true;\n\t        if (!enableTransition) {\n\t            this._target.copy(this._targetEnd);\n\t            this._spherical.copy(this._sphericalEnd);\n\t        }\n\t        const resolveImmediately = !enableTransition ||\n\t            approxEquals(this._target.x, this._targetEnd.x, this.restThreshold) &&\n\t                approxEquals(this._target.y, this._targetEnd.y, this.restThreshold) &&\n\t                approxEquals(this._target.z, this._targetEnd.z, this.restThreshold) &&\n\t                approxEquals(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) &&\n\t                approxEquals(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) &&\n\t                approxEquals(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n\t        return this._createOnRestPromise(resolveImmediately);\n\t    }\n\t    /**\n\t     * Set angle and distance by given position.\n\t     * An alias of `setLookAt()`, without target change. Thus keep gazing at the current target\n\t     * @param positionX\n\t     * @param positionY\n\t     * @param positionZ\n\t     * @param enableTransition\n\t     * @category Methods\n\t     */\n\t    setPosition(positionX, positionY, positionZ, enableTransition = false) {\n\t        return this.setLookAt(positionX, positionY, positionZ, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, enableTransition);\n\t    }\n\t    /**\n\t     * Set the target position where gaze at.\n\t     * An alias of `setLookAt()`, without position change. Thus keep the same position.\n\t     * @param targetX\n\t     * @param targetY\n\t     * @param targetZ\n\t     * @param enableTransition\n\t     * @category Methods\n\t     */\n\t    setTarget(targetX, targetY, targetZ, enableTransition = false) {\n\t        const pos = this.getPosition(_v3A);\n\t        const promise = this.setLookAt(pos.x, pos.y, pos.z, targetX, targetY, targetZ, enableTransition);\n\t        // see https://github.com/yomotsu/camera-controls/issues/335\n\t        this._sphericalEnd.phi = clamp(this._sphericalEnd.phi, this.minPolarAngle, this.maxPolarAngle);\n\t        return promise;\n\t    }\n\t    /**\n\t     * Set focal offset using the screen parallel coordinates. z doesn't affect in Orthographic as with Dolly.\n\t     * @param x\n\t     * @param y\n\t     * @param z\n\t     * @param enableTransition\n\t     * @category Methods\n\t     */\n\t    setFocalOffset(x, y, z, enableTransition = false) {\n\t        this._isUserControllingOffset = false;\n\t        this._focalOffsetEnd.set(x, y, z);\n\t        this._needsUpdate = true;\n\t        if (!enableTransition)\n\t            this._focalOffset.copy(this._focalOffsetEnd);\n\t        const resolveImmediately = !enableTransition ||\n\t            approxEquals(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) &&\n\t                approxEquals(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) &&\n\t                approxEquals(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);\n\t        return this._createOnRestPromise(resolveImmediately);\n\t    }\n\t    /**\n\t     * Set orbit point without moving the camera.\n\t     * SHOULD NOT RUN DURING ANIMATIONS. `setOrbitPoint()` will immediately fix the positions.\n\t     * @param targetX\n\t     * @param targetY\n\t     * @param targetZ\n\t     * @category Methods\n\t     */\n\t    setOrbitPoint(targetX, targetY, targetZ) {\n\t        this._camera.updateMatrixWorld();\n\t        _xColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 0);\n\t        _yColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 1);\n\t        _zColumn.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);\n\t        const position = _v3A.set(targetX, targetY, targetZ);\n\t        const distance = position.distanceTo(this._camera.position);\n\t        const cameraToPoint = position.sub(this._camera.position);\n\t        _xColumn.multiplyScalar(cameraToPoint.x);\n\t        _yColumn.multiplyScalar(cameraToPoint.y);\n\t        _zColumn.multiplyScalar(cameraToPoint.z);\n\t        _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n\t        _v3A.z = _v3A.z + distance;\n\t        this.dollyTo(distance, false);\n\t        this.setFocalOffset(-_v3A.x, _v3A.y, -_v3A.z, false);\n\t        this.moveTo(targetX, targetY, targetZ, false);\n\t    }\n\t    /**\n\t     * Set the boundary box that encloses the target of the camera. box3 is in THREE.Box3\n\t     * @param box3\n\t     * @category Methods\n\t     */\n\t    setBoundary(box3) {\n\t        if (!box3) {\n\t            this._boundary.min.set(-Infinity, -Infinity, -Infinity);\n\t            this._boundary.max.set(Infinity, Infinity, Infinity);\n\t            this._needsUpdate = true;\n\t            return;\n\t        }\n\t        this._boundary.copy(box3);\n\t        this._boundary.clampPoint(this._targetEnd, this._targetEnd);\n\t        this._needsUpdate = true;\n\t    }\n\t    /**\n\t     * Set (or unset) the current viewport.\n\t     * Set this when you want to use renderer viewport and .dollyToCursor feature at the same time.\n\t     * @param viewportOrX\n\t     * @param y\n\t     * @param width\n\t     * @param height\n\t     * @category Methods\n\t     */\n\t    setViewport(viewportOrX, y, width, height) {\n\t        if (viewportOrX === null) { // null\n\t            this._viewport = null;\n\t            return;\n\t        }\n\t        this._viewport = this._viewport || new THREE.Vector4();\n\t        if (typeof viewportOrX === 'number') { // number\n\t            this._viewport.set(viewportOrX, y, width, height);\n\t        }\n\t        else { // Vector4\n\t            this._viewport.copy(viewportOrX);\n\t        }\n\t    }\n\t    /**\n\t     * Calculate the distance to fit the box.\n\t     * @param width box width\n\t     * @param height box height\n\t     * @param depth box depth\n\t     * @returns distance\n\t     * @category Methods\n\t     */\n\t    getDistanceToFitBox(width, height, depth, cover = false) {\n\t        if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitBox'))\n\t            return this._spherical.radius;\n\t        const boundingRectAspect = width / height;\n\t        const fov = this._camera.getEffectiveFOV() * DEG2RAD;\n\t        const aspect = this._camera.aspect;\n\t        const heightToFit = (cover ? boundingRectAspect > aspect : boundingRectAspect < aspect) ? height : width / aspect;\n\t        return heightToFit * 0.5 / Math.tan(fov * 0.5) + depth * 0.5;\n\t    }\n\t    /**\n\t     * Calculate the distance to fit the sphere.\n\t     * @param radius sphere radius\n\t     * @returns distance\n\t     * @category Methods\n\t     */\n\t    getDistanceToFitSphere(radius) {\n\t        if (notSupportedInOrthographicCamera(this._camera, 'getDistanceToFitSphere'))\n\t            return this._spherical.radius;\n\t        // https://stackoverflow.com/a/44849975\n\t        const vFOV = this._camera.getEffectiveFOV() * DEG2RAD;\n\t        const hFOV = Math.atan(Math.tan(vFOV * 0.5) * this._camera.aspect) * 2;\n\t        const fov = 1 < this._camera.aspect ? vFOV : hFOV;\n\t        return radius / (Math.sin(fov * 0.5));\n\t    }\n\t    /**\n\t     * Returns the orbit center position, where the camera looking at.\n\t     * @param out The receiving Vector3 instance to copy the result\n\t     * @param receiveEndValue Whether receive the transition end coords or current. default is `true`\n\t     * @category Methods\n\t     */\n\t    getTarget(out, receiveEndValue = true) {\n\t        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n\t        return _out.copy(receiveEndValue ? this._targetEnd : this._target);\n\t    }\n\t    /**\n\t     * Returns the camera position.\n\t     * @param out The receiving Vector3 instance to copy the result\n\t     * @param receiveEndValue Whether receive the transition end coords or current. default is `true`\n\t     * @category Methods\n\t     */\n\t    getPosition(out, receiveEndValue = true) {\n\t        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n\t        return _out.setFromSpherical(receiveEndValue ? this._sphericalEnd : this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(receiveEndValue ? this._targetEnd : this._target);\n\t    }\n\t    /**\n\t     * Returns the spherical coordinates of the orbit.\n\t     * @param out The receiving Spherical instance to copy the result\n\t     * @param receiveEndValue Whether receive the transition end coords or current. default is `true`\n\t     * @category Methods\n\t     */\n\t    getSpherical(out, receiveEndValue = true) {\n\t        const _out = !!out && out instanceof THREE.Spherical ? out : new THREE.Spherical();\n\t        return _out.copy(receiveEndValue ? this._sphericalEnd : this._spherical);\n\t    }\n\t    /**\n\t     * Returns the focal offset, which is how much the camera appears to be translated in screen parallel coordinates.\n\t     * @param out The receiving Vector3 instance to copy the result\n\t     * @param receiveEndValue Whether receive the transition end coords or current. default is `true`\n\t     * @category Methods\n\t     */\n\t    getFocalOffset(out, receiveEndValue = true) {\n\t        const _out = !!out && out.isVector3 ? out : new THREE.Vector3();\n\t        return _out.copy(receiveEndValue ? this._focalOffsetEnd : this._focalOffset);\n\t    }\n\t    /**\n\t     * Normalize camera azimuth angle rotation between 0 and 360 degrees.\n\t     * @category Methods\n\t     */\n\t    normalizeRotations() {\n\t        this._sphericalEnd.theta = this._sphericalEnd.theta % PI_2;\n\t        if (this._sphericalEnd.theta < 0)\n\t            this._sphericalEnd.theta += PI_2;\n\t        this._spherical.theta += PI_2 * Math.round((this._sphericalEnd.theta - this._spherical.theta) / PI_2);\n\t    }\n\t    /**\n\t     * Reset all rotation and position to defaults.\n\t     * @param enableTransition\n\t     * @category Methods\n\t     */\n\t    reset(enableTransition = false) {\n\t        if (!approxEquals(this._camera.up.x, this._cameraUp0.x) ||\n\t            !approxEquals(this._camera.up.y, this._cameraUp0.y) ||\n\t            !approxEquals(this._camera.up.z, this._cameraUp0.z)) {\n\t            this._camera.up.copy(this._cameraUp0);\n\t            const position = this.getPosition(_v3A);\n\t            this.updateCameraUp();\n\t            this.setPosition(position.x, position.y, position.z);\n\t        }\n\t        const promises = [\n\t            this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, enableTransition),\n\t            this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, enableTransition),\n\t            this.zoomTo(this._zoom0, enableTransition),\n\t        ];\n\t        return Promise.all(promises);\n\t    }\n\t    /**\n\t     * Set current camera position as the default position.\n\t     * @category Methods\n\t     */\n\t    saveState() {\n\t        this._cameraUp0.copy(this._camera.up);\n\t        this.getTarget(this._target0);\n\t        this.getPosition(this._position0);\n\t        this._zoom0 = this._zoom;\n\t        this._focalOffset0.copy(this._focalOffset);\n\t    }\n\t    /**\n\t     * Sync camera-up direction.\n\t     * When camera-up vector is changed, `.updateCameraUp()` must be called.\n\t     * @category Methods\n\t     */\n\t    updateCameraUp() {\n\t        this._yAxisUpSpace.setFromUnitVectors(this._camera.up, _AXIS_Y);\n\t        this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace).invert();\n\t    }\n\t    /**\n\t     * Apply current camera-up direction to the camera.\n\t     * The orbit system will be re-initialized with the current position.\n\t     * @category Methods\n\t     */\n\t    applyCameraUp() {\n\t        const cameraDirection = _v3A.subVectors(this._target, this._camera.position).normalize();\n\t        // So first find the vector off to the side, orthogonal to both this.object.up and\n\t        // the \"view\" vector.\n\t        const side = _v3B.crossVectors(cameraDirection, this._camera.up);\n\t        // Then find the vector orthogonal to both this \"side\" vector and the \"view\" vector.\n\t        // This vector will be the new \"up\" vector.\n\t        this._camera.up.crossVectors(side, cameraDirection).normalize();\n\t        this._camera.updateMatrixWorld();\n\t        const position = this.getPosition(_v3A);\n\t        this.updateCameraUp();\n\t        this.setPosition(position.x, position.y, position.z);\n\t    }\n\t    /**\n\t     * Update camera position and directions.\n\t     * This should be called in your tick loop every time, and returns true if re-rendering is needed.\n\t     * @param delta\n\t     * @returns updated\n\t     * @category Methods\n\t     */\n\t    update(delta) {\n\t        const deltaTheta = this._sphericalEnd.theta - this._spherical.theta;\n\t        const deltaPhi = this._sphericalEnd.phi - this._spherical.phi;\n\t        const deltaRadius = this._sphericalEnd.radius - this._spherical.radius;\n\t        const deltaTarget = _deltaTarget.subVectors(this._targetEnd, this._target);\n\t        const deltaOffset = _deltaOffset.subVectors(this._focalOffsetEnd, this._focalOffset);\n\t        const deltaZoom = this._zoomEnd - this._zoom;\n\t        // update theta\n\t        if (approxZero(deltaTheta)) {\n\t            this._thetaVelocity.value = 0;\n\t            this._spherical.theta = this._sphericalEnd.theta;\n\t        }\n\t        else {\n\t            const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n\t            this._spherical.theta = smoothDamp(this._spherical.theta, this._sphericalEnd.theta, this._thetaVelocity, smoothTime, Infinity, delta);\n\t            this._needsUpdate = true;\n\t        }\n\t        // update phi\n\t        if (approxZero(deltaPhi)) {\n\t            this._phiVelocity.value = 0;\n\t            this._spherical.phi = this._sphericalEnd.phi;\n\t        }\n\t        else {\n\t            const smoothTime = this._isUserControllingRotate ? this.draggingSmoothTime : this.smoothTime;\n\t            this._spherical.phi = smoothDamp(this._spherical.phi, this._sphericalEnd.phi, this._phiVelocity, smoothTime, Infinity, delta);\n\t            this._needsUpdate = true;\n\t        }\n\t        // update distance\n\t        if (approxZero(deltaRadius)) {\n\t            this._radiusVelocity.value = 0;\n\t            this._spherical.radius = this._sphericalEnd.radius;\n\t        }\n\t        else {\n\t            const smoothTime = this._isUserControllingDolly ? this.draggingSmoothTime : this.smoothTime;\n\t            this._spherical.radius = smoothDamp(this._spherical.radius, this._sphericalEnd.radius, this._radiusVelocity, smoothTime, this.maxSpeed, delta);\n\t            this._needsUpdate = true;\n\t        }\n\t        // update target position\n\t        if (approxZero(deltaTarget.x) && approxZero(deltaTarget.y) && approxZero(deltaTarget.z)) {\n\t            this._targetVelocity.set(0, 0, 0);\n\t            this._target.copy(this._targetEnd);\n\t        }\n\t        else {\n\t            const smoothTime = this._isUserControllingTruck ? this.draggingSmoothTime : this.smoothTime;\n\t            smoothDampVec3(this._target, this._targetEnd, this._targetVelocity, smoothTime, this.maxSpeed, delta, this._target);\n\t            this._needsUpdate = true;\n\t        }\n\t        // update focalOffset\n\t        if (approxZero(deltaOffset.x) && approxZero(deltaOffset.y) && approxZero(deltaOffset.z)) {\n\t            this._focalOffsetVelocity.set(0, 0, 0);\n\t            this._focalOffset.copy(this._focalOffsetEnd);\n\t        }\n\t        else {\n\t            const smoothTime = this._isUserControllingOffset ? this.draggingSmoothTime : this.smoothTime;\n\t            smoothDampVec3(this._focalOffset, this._focalOffsetEnd, this._focalOffsetVelocity, smoothTime, this.maxSpeed, delta, this._focalOffset);\n\t            this._needsUpdate = true;\n\t        }\n\t        // update zoom\n\t        if (approxZero(deltaZoom)) {\n\t            this._zoomVelocity.value = 0;\n\t            this._zoom = this._zoomEnd;\n\t        }\n\t        else {\n\t            const smoothTime = this._isUserControllingZoom ? this.draggingSmoothTime : this.smoothTime;\n\t            this._zoom = smoothDamp(this._zoom, this._zoomEnd, this._zoomVelocity, smoothTime, Infinity, delta);\n\t        }\n\t        if (this.dollyToCursor) {\n\t            if (isPerspectiveCamera(this._camera) && this._changedDolly !== 0) {\n\t                const dollyControlAmount = this._spherical.radius - this._lastDistance;\n\t                const camera = this._camera;\n\t                const cameraDirection = this._getCameraDirection(_cameraDirection);\n\t                const planeX = _v3A.copy(cameraDirection).cross(camera.up).normalize();\n\t                if (planeX.lengthSq() === 0)\n\t                    planeX.x = 1.0;\n\t                const planeY = _v3B.crossVectors(planeX, cameraDirection);\n\t                const worldToScreen = this._sphericalEnd.radius * Math.tan(camera.getEffectiveFOV() * DEG2RAD * 0.5);\n\t                const prevRadius = this._sphericalEnd.radius - dollyControlAmount;\n\t                const lerpRatio = (prevRadius - this._sphericalEnd.radius) / this._sphericalEnd.radius;\n\t                const cursor = _v3C.copy(this._targetEnd)\n\t                    .add(planeX.multiplyScalar(this._dollyControlCoord.x * worldToScreen * camera.aspect))\n\t                    .add(planeY.multiplyScalar(this._dollyControlCoord.y * worldToScreen));\n\t                const newTargetEnd = _v3A.copy(this._targetEnd).lerp(cursor, lerpRatio);\n\t                const isMin = this._lastDollyDirection === DOLLY_DIRECTION.IN && this._spherical.radius <= this.minDistance;\n\t                const isMax = this._lastDollyDirection === DOLLY_DIRECTION.OUT && this.maxDistance <= this._spherical.radius;\n\t                if (this.infinityDolly && (isMin || isMax)) {\n\t                    this._sphericalEnd.radius -= dollyControlAmount;\n\t                    this._spherical.radius -= dollyControlAmount;\n\t                    const dollyAmount = _v3B.copy(cameraDirection).multiplyScalar(-dollyControlAmount);\n\t                    newTargetEnd.add(dollyAmount);\n\t                }\n\t                // target position may be moved beyond boundary.\n\t                this._boundary.clampPoint(newTargetEnd, newTargetEnd);\n\t                const targetEndDiff = _v3B.subVectors(newTargetEnd, this._targetEnd);\n\t                this._targetEnd.copy(newTargetEnd);\n\t                this._target.add(targetEndDiff);\n\t                this._changedDolly -= dollyControlAmount;\n\t                if (approxZero(this._changedDolly))\n\t                    this._changedDolly = 0;\n\t            }\n\t            else if (isOrthographicCamera(this._camera) && this._changedZoom !== 0) {\n\t                const dollyControlAmount = this._zoom - this._lastZoom;\n\t                const camera = this._camera;\n\t                const worldCursorPosition = _v3A.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n\t                const quaternion = _v3B.set(0, 0, -1).applyQuaternion(camera.quaternion);\n\t                const cursor = _v3C.copy(worldCursorPosition).add(quaternion.multiplyScalar(-worldCursorPosition.dot(camera.up)));\n\t                const prevZoom = this._zoom - dollyControlAmount;\n\t                const lerpRatio = -(prevZoom - this._zoom) / this._zoom;\n\t                // find the \"distance\" (aka plane constant in three.js) of Plane\n\t                // from a given position (this._targetEnd) and normal vector (cameraDirection)\n\t                // https://www.maplesoft.com/support/help/maple/view.aspx?path=MathApps%2FEquationOfAPlaneNormal#bkmrk0\n\t                const cameraDirection = this._getCameraDirection(_cameraDirection);\n\t                const prevPlaneConstant = this._targetEnd.dot(cameraDirection);\n\t                const newTargetEnd = _v3A.copy(this._targetEnd).lerp(cursor, lerpRatio);\n\t                const newPlaneConstant = newTargetEnd.dot(cameraDirection);\n\t                // Pull back the camera depth that has moved, to be the camera stationary as zoom\n\t                const pullBack = cameraDirection.multiplyScalar(newPlaneConstant - prevPlaneConstant);\n\t                newTargetEnd.sub(pullBack);\n\t                // target position may be moved beyond boundary.\n\t                this._boundary.clampPoint(newTargetEnd, newTargetEnd);\n\t                const targetEndDiff = _v3B.subVectors(newTargetEnd, this._targetEnd);\n\t                this._targetEnd.copy(newTargetEnd);\n\t                this._target.add(targetEndDiff);\n\t                // this._target.copy( this._targetEnd );\n\t                this._changedZoom -= dollyControlAmount;\n\t                if (approxZero(this._changedZoom))\n\t                    this._changedZoom = 0;\n\t            }\n\t        }\n\t        if (this._camera.zoom !== this._zoom) {\n\t            this._camera.zoom = this._zoom;\n\t            this._camera.updateProjectionMatrix();\n\t            this._updateNearPlaneCorners();\n\t            this._needsUpdate = true;\n\t        }\n\t        // collision detection\n\t        const maxDistance = this._collisionTest();\n\t        this._spherical.radius = Math.min(this._spherical.radius, maxDistance);\n\t        // decompose spherical to the camera position\n\t        this._spherical.makeSafe();\n\t        this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target);\n\t        this._camera.lookAt(this._target);\n\t        // set offset after the orbit movement\n\t        const affectOffset = !approxZero(this._focalOffset.x) ||\n\t            !approxZero(this._focalOffset.y) ||\n\t            !approxZero(this._focalOffset.z);\n\t        if (affectOffset) {\n\t            this._camera.updateMatrixWorld();\n\t            _xColumn.setFromMatrixColumn(this._camera.matrix, 0);\n\t            _yColumn.setFromMatrixColumn(this._camera.matrix, 1);\n\t            _zColumn.setFromMatrixColumn(this._camera.matrix, 2);\n\t            _xColumn.multiplyScalar(this._focalOffset.x);\n\t            _yColumn.multiplyScalar(-this._focalOffset.y);\n\t            _zColumn.multiplyScalar(this._focalOffset.z); // notice: z-offset will not affect in Orthographic.\n\t            _v3A.copy(_xColumn).add(_yColumn).add(_zColumn);\n\t            this._camera.position.add(_v3A);\n\t        }\n\t        if (this._boundaryEnclosesCamera) {\n\t            this._encloseToBoundary(this._camera.position.copy(this._target), _v3A.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1.0);\n\t        }\n\t        const updated = this._needsUpdate;\n\t        if (updated && !this._updatedLastTime) {\n\t            this._hasRested = false;\n\t            this.dispatchEvent({ type: 'wake' });\n\t            this.dispatchEvent({ type: 'update' });\n\t        }\n\t        else if (updated) {\n\t            this.dispatchEvent({ type: 'update' });\n\t            if (approxZero(deltaTheta, this.restThreshold) &&\n\t                approxZero(deltaPhi, this.restThreshold) &&\n\t                approxZero(deltaRadius, this.restThreshold) &&\n\t                approxZero(deltaTarget.x, this.restThreshold) &&\n\t                approxZero(deltaTarget.y, this.restThreshold) &&\n\t                approxZero(deltaTarget.z, this.restThreshold) &&\n\t                approxZero(deltaOffset.x, this.restThreshold) &&\n\t                approxZero(deltaOffset.y, this.restThreshold) &&\n\t                approxZero(deltaOffset.z, this.restThreshold) &&\n\t                approxZero(deltaZoom, this.restThreshold) &&\n\t                !this._hasRested) {\n\t                this._hasRested = true;\n\t                this.dispatchEvent({ type: 'rest' });\n\t            }\n\t        }\n\t        else if (!updated && this._updatedLastTime) {\n\t            this.dispatchEvent({ type: 'sleep' });\n\t        }\n\t        this._lastDistance = this._spherical.radius;\n\t        this._lastZoom = this._zoom;\n\t        this._updatedLastTime = updated;\n\t        this._needsUpdate = false;\n\t        return updated;\n\t    }\n\t    /**\n\t     * Get all state in JSON string\n\t     * @category Methods\n\t     */\n\t    toJSON() {\n\t        return JSON.stringify({\n\t            enabled: this._enabled,\n\t            minDistance: this.minDistance,\n\t            maxDistance: infinityToMaxNumber(this.maxDistance),\n\t            minZoom: this.minZoom,\n\t            maxZoom: infinityToMaxNumber(this.maxZoom),\n\t            minPolarAngle: this.minPolarAngle,\n\t            maxPolarAngle: infinityToMaxNumber(this.maxPolarAngle),\n\t            minAzimuthAngle: infinityToMaxNumber(this.minAzimuthAngle),\n\t            maxAzimuthAngle: infinityToMaxNumber(this.maxAzimuthAngle),\n\t            smoothTime: this.smoothTime,\n\t            draggingSmoothTime: this.draggingSmoothTime,\n\t            dollySpeed: this.dollySpeed,\n\t            truckSpeed: this.truckSpeed,\n\t            dollyToCursor: this.dollyToCursor,\n\t            verticalDragToForward: this.verticalDragToForward,\n\t            target: this._targetEnd.toArray(),\n\t            position: _v3A.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),\n\t            zoom: this._zoomEnd,\n\t            focalOffset: this._focalOffsetEnd.toArray(),\n\t            target0: this._target0.toArray(),\n\t            position0: this._position0.toArray(),\n\t            zoom0: this._zoom0,\n\t            focalOffset0: this._focalOffset0.toArray(),\n\t        });\n\t    }\n\t    /**\n\t     * Reproduce the control state with JSON. enableTransition is where anim or not in a boolean.\n\t     * @param json\n\t     * @param enableTransition\n\t     * @category Methods\n\t     */\n\t    fromJSON(json, enableTransition = false) {\n\t        const obj = JSON.parse(json);\n\t        this.enabled = obj.enabled;\n\t        this.minDistance = obj.minDistance;\n\t        this.maxDistance = maxNumberToInfinity(obj.maxDistance);\n\t        this.minZoom = obj.minZoom;\n\t        this.maxZoom = maxNumberToInfinity(obj.maxZoom);\n\t        this.minPolarAngle = obj.minPolarAngle;\n\t        this.maxPolarAngle = maxNumberToInfinity(obj.maxPolarAngle);\n\t        this.minAzimuthAngle = maxNumberToInfinity(obj.minAzimuthAngle);\n\t        this.maxAzimuthAngle = maxNumberToInfinity(obj.maxAzimuthAngle);\n\t        this.smoothTime = obj.smoothTime;\n\t        this.draggingSmoothTime = obj.draggingSmoothTime;\n\t        this.dollySpeed = obj.dollySpeed;\n\t        this.truckSpeed = obj.truckSpeed;\n\t        this.dollyToCursor = obj.dollyToCursor;\n\t        this.verticalDragToForward = obj.verticalDragToForward;\n\t        this._target0.fromArray(obj.target0);\n\t        this._position0.fromArray(obj.position0);\n\t        this._zoom0 = obj.zoom0;\n\t        this._focalOffset0.fromArray(obj.focalOffset0);\n\t        this.moveTo(obj.target[0], obj.target[1], obj.target[2], enableTransition);\n\t        _sphericalA.setFromVector3(_v3A.fromArray(obj.position).sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace));\n\t        this.rotateTo(_sphericalA.theta, _sphericalA.phi, enableTransition);\n\t        this.dollyTo(_sphericalA.radius, enableTransition);\n\t        this.zoomTo(obj.zoom, enableTransition);\n\t        this.setFocalOffset(obj.focalOffset[0], obj.focalOffset[1], obj.focalOffset[2], enableTransition);\n\t        this._needsUpdate = true;\n\t    }\n\t    /**\n\t     * Attach all internal event handlers to enable drag control.\n\t     * @category Methods\n\t     */\n\t    connect(domElement) {\n\t        if (this._domElement) {\n\t            console.warn('camera-controls is already connected.');\n\t            return;\n\t        }\n\t        domElement.setAttribute('data-camera-controls-version', VERSION);\n\t        this._addAllEventListeners(domElement);\n\t        this._getClientRect(this._elementRect);\n\t    }\n\t    /**\n\t     * Detach all internal event handlers to disable drag control.\n\t     */\n\t    disconnect() {\n\t        this.cancel();\n\t        this._removeAllEventListeners();\n\t        if (this._domElement) {\n\t            this._domElement.removeAttribute('data-camera-controls-version');\n\t            this._domElement = undefined;\n\t        }\n\t    }\n\t    /**\n\t     * Dispose the cameraControls instance itself, remove all eventListeners.\n\t     * @category Methods\n\t     */\n\t    dispose() {\n\t        // remove all user event listeners\n\t        this.removeAllEventListeners();\n\t        // remove all internal event listeners\n\t        this.disconnect();\n\t    }\n\t    // it's okay to expose public though\n\t    _getTargetDirection(out) {\n\t        // divide by distance to normalize, lighter than `Vector3.prototype.normalize()`\n\t        return out.setFromSpherical(this._spherical).divideScalar(this._spherical.radius).applyQuaternion(this._yAxisUpSpaceInverse);\n\t    }\n\t    // it's okay to expose public though\n\t    _getCameraDirection(out) {\n\t        return this._getTargetDirection(out).negate();\n\t    }\n\t    _findPointerById(pointerId) {\n\t        return this._activePointers.find((activePointer) => activePointer.pointerId === pointerId);\n\t    }\n\t    _findPointerByMouseButton(mouseButton) {\n\t        return this._activePointers.find((activePointer) => activePointer.mouseButton === mouseButton);\n\t    }\n\t    _disposePointer(pointer) {\n\t        this._activePointers.splice(this._activePointers.indexOf(pointer), 1);\n\t    }\n\t    _encloseToBoundary(position, offset, friction) {\n\t        const offsetLength2 = offset.lengthSq();\n\t        if (offsetLength2 === 0.0) { // sanity check\n\t            return position;\n\t        }\n\t        // See: https://twitter.com/FMS_Cat/status/1106508958640988161\n\t        const newTarget = _v3B.copy(offset).add(position); // target\n\t        const clampedTarget = this._boundary.clampPoint(newTarget, _v3C); // clamped target\n\t        const deltaClampedTarget = clampedTarget.sub(newTarget); // newTarget -> clampedTarget\n\t        const deltaClampedTargetLength2 = deltaClampedTarget.lengthSq(); // squared length of deltaClampedTarget\n\t        if (deltaClampedTargetLength2 === 0.0) { // when the position doesn't have to be clamped\n\t            return position.add(offset);\n\t        }\n\t        else if (deltaClampedTargetLength2 === offsetLength2) { // when the position is completely stuck\n\t            return position;\n\t        }\n\t        else if (friction === 0.0) {\n\t            return position.add(offset).add(deltaClampedTarget);\n\t        }\n\t        else {\n\t            const offsetFactor = 1.0 + friction * deltaClampedTargetLength2 / offset.dot(deltaClampedTarget);\n\t            return position\n\t                .add(_v3B.copy(offset).multiplyScalar(offsetFactor))\n\t                .add(deltaClampedTarget.multiplyScalar(1.0 - friction));\n\t        }\n\t    }\n\t    _updateNearPlaneCorners() {\n\t        if (isPerspectiveCamera(this._camera)) {\n\t            const camera = this._camera;\n\t            const near = camera.near;\n\t            const fov = camera.getEffectiveFOV() * DEG2RAD;\n\t            const heightHalf = Math.tan(fov * 0.5) * near; // near plain half height\n\t            const widthHalf = heightHalf * camera.aspect; // near plain half width\n\t            this._nearPlaneCorners[0].set(-widthHalf, -heightHalf, 0);\n\t            this._nearPlaneCorners[1].set(widthHalf, -heightHalf, 0);\n\t            this._nearPlaneCorners[2].set(widthHalf, heightHalf, 0);\n\t            this._nearPlaneCorners[3].set(-widthHalf, heightHalf, 0);\n\t        }\n\t        else if (isOrthographicCamera(this._camera)) {\n\t            const camera = this._camera;\n\t            const zoomInv = 1 / camera.zoom;\n\t            const left = camera.left * zoomInv;\n\t            const right = camera.right * zoomInv;\n\t            const top = camera.top * zoomInv;\n\t            const bottom = camera.bottom * zoomInv;\n\t            this._nearPlaneCorners[0].set(left, top, 0);\n\t            this._nearPlaneCorners[1].set(right, top, 0);\n\t            this._nearPlaneCorners[2].set(right, bottom, 0);\n\t            this._nearPlaneCorners[3].set(left, bottom, 0);\n\t        }\n\t    }\n\t    // lateUpdate\n\t    _collisionTest() {\n\t        let distance = Infinity;\n\t        const hasCollider = this.colliderMeshes.length >= 1;\n\t        if (!hasCollider)\n\t            return distance;\n\t        if (notSupportedInOrthographicCamera(this._camera, '_collisionTest'))\n\t            return distance;\n\t        const rayDirection = this._getTargetDirection(_cameraDirection);\n\t        _rotationMatrix.lookAt(_ORIGIN, rayDirection, this._camera.up);\n\t        for (let i = 0; i < 4; i++) {\n\t            const nearPlaneCorner = _v3B.copy(this._nearPlaneCorners[i]);\n\t            nearPlaneCorner.applyMatrix4(_rotationMatrix);\n\t            const origin = _v3C.addVectors(this._target, nearPlaneCorner);\n\t            _raycaster.set(origin, rayDirection);\n\t            _raycaster.far = this._spherical.radius + 1;\n\t            const intersects = _raycaster.intersectObjects(this.colliderMeshes);\n\t            if (intersects.length !== 0 && intersects[0].distance < distance) {\n\t                distance = intersects[0].distance;\n\t            }\n\t        }\n\t        return distance;\n\t    }\n\t    /**\n\t     * Get its client rect and package into given `DOMRect` .\n\t     */\n\t    _getClientRect(target) {\n\t        if (!this._domElement)\n\t            return;\n\t        const rect = this._domElement.getBoundingClientRect();\n\t        target.x = rect.left;\n\t        target.y = rect.top;\n\t        if (this._viewport) {\n\t            target.x += this._viewport.x;\n\t            target.y += rect.height - this._viewport.w - this._viewport.y;\n\t            target.width = this._viewport.z;\n\t            target.height = this._viewport.w;\n\t        }\n\t        else {\n\t            target.width = rect.width;\n\t            target.height = rect.height;\n\t        }\n\t        return target;\n\t    }\n\t    _createOnRestPromise(resolveImmediately) {\n\t        if (resolveImmediately)\n\t            return Promise.resolve();\n\t        this._hasRested = false;\n\t        this.dispatchEvent({ type: 'transitionstart' });\n\t        return new Promise((resolve) => {\n\t            const onResolve = () => {\n\t                this.removeEventListener('rest', onResolve);\n\t                resolve();\n\t            };\n\t            this.addEventListener('rest', onResolve);\n\t        });\n\t    }\n\t    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t    _addAllEventListeners(_domElement) { }\n\t    _removeAllEventListeners() { }\n\t    /**\n\t     * backward compatible\n\t     * @deprecated use smoothTime (in seconds) instead\n\t     * @category Properties\n\t     */\n\t    get dampingFactor() {\n\t        console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n\t        return 0;\n\t    }\n\t    /**\n\t     * backward compatible\n\t     * @deprecated use smoothTime (in seconds) instead\n\t     * @category Properties\n\t     */\n\t    set dampingFactor(_) {\n\t        console.warn('.dampingFactor has been deprecated. use smoothTime (in seconds) instead.');\n\t    }\n\t    /**\n\t     * backward compatible\n\t     * @deprecated use draggingSmoothTime (in seconds) instead\n\t     * @category Properties\n\t     */\n\t    get draggingDampingFactor() {\n\t        console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n\t        return 0;\n\t    }\n\t    /**\n\t     * backward compatible\n\t     * @deprecated use draggingSmoothTime (in seconds) instead\n\t     * @category Properties\n\t     */\n\t    set draggingDampingFactor(_) {\n\t        console.warn('.draggingDampingFactor has been deprecated. use draggingSmoothTime (in seconds) instead.');\n\t    }\n\t    static createBoundingSphere(object3d, out = new THREE.Sphere()) {\n\t        const boundingSphere = out;\n\t        const center = boundingSphere.center;\n\t        _box3A.makeEmpty();\n\t        // find the center\n\t        object3d.traverseVisible((object) => {\n\t            if (!object.isMesh)\n\t                return;\n\t            _box3A.expandByObject(object);\n\t        });\n\t        _box3A.getCenter(center);\n\t        // find the radius\n\t        let maxRadiusSq = 0;\n\t        object3d.traverseVisible((object) => {\n\t            if (!object.isMesh)\n\t                return;\n\t            const mesh = object;\n\t            const geometry = mesh.geometry.clone();\n\t            geometry.applyMatrix4(mesh.matrixWorld);\n\t            const bufferGeometry = geometry;\n\t            const position = bufferGeometry.attributes.position;\n\t            for (let i = 0, l = position.count; i < l; i++) {\n\t                _v3A.fromBufferAttribute(position, i);\n\t                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_v3A));\n\t            }\n\t        });\n\t        boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\t        return boundingSphere;\n\t    }\n\t}\n\n\treturn CameraControls;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/camera-controls/dist/camera-controls.js\n");

/***/ })

};
;