"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/stats-gl";
exports.ids = ["vendor-chunks/stats-gl"];
exports.modules = {

/***/ "(ssr)/./node_modules/stats-gl/dist/main.cjs":
/*!*********************************************!*\
  !*** ./node_modules/stats-gl/dist/main.cjs ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst panel = __webpack_require__(/*! ./panel.cjs */ \"(ssr)/./node_modules/stats-gl/dist/panel.cjs\");\nconst _Stats = class _Stats {\n  constructor({ logsPerSecond = 20, samplesLog = 100, samplesGraph = 10, precision = 2, minimal = false, horizontal = true, mode = 0 } = {}) {\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement(\"div\");\n    this.container.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.container.style.cssText += \"cursor:pointer\";\n    }\n    this.canvasGpu = null;\n    this.gl = null;\n    this.query = null;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new _Stats.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.container.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n        this.showPanel(++this.mode % this.container.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", () => {\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n      });\n    }\n  }\n  resizePanel(panel2, offset) {\n    panel2.canvas.style.position = \"absolute\";\n    if (this.minimal) {\n      panel2.canvas.style.display = \"none\";\n    } else {\n      panel2.canvas.style.display = \"block\";\n      if (this.horizontal) {\n        panel2.canvas.style.top = \"0px\";\n        panel2.canvas.style.left = offset * panel2.WIDTH / panel2.PR + \"px\";\n      } else {\n        panel2.canvas.style.left = \"0px\";\n        panel2.canvas.style.top = offset * panel2.HEIGHT / panel2.PR + \"px\";\n      }\n    }\n  }\n  addPanel(panel2, offset) {\n    if (panel2.canvas) {\n      this.container.appendChild(panel2.canvas);\n      this.resizePanel(panel2, offset);\n    }\n    return panel2;\n  }\n  showPanel(id) {\n    for (let i = 0; i < this.container.children.length; i++) {\n      const child = this.container.children[i];\n      child.style.display = i === id ? \"block\" : \"none\";\n    }\n    this.mode = id;\n  }\n  init(canvas) {\n    this.canvasGpu = canvas;\n    if (!this.canvasGpu)\n      return;\n    this.gl = this.canvasGpu.getContext(\"webgl2\");\n    this.ext = this.gl ? this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\") : null;\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new _Stats.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n    }\n  }\n  begin() {\n    this.beginProfiling(\"cpu-started\");\n    if (!this.gl || !this.ext)\n      return;\n    if (this.query) {\n      const available = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT_AVAILABLE);\n      this.disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n      if (available && !this.disjoint) {\n        this.ns = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT);\n        const ms = this.ns * 1e-6;\n        if (available || this.disjoint) {\n          this.gl.deleteQuery(this.query);\n          this.query = null;\n        }\n        if (available) {\n          this.addToAverage(ms, this.averageGpu);\n        }\n      }\n    }\n    if (!this.query) {\n      this.queryCreated = true;\n      this.query = this.gl.createQuery();\n      if (this.query) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.query);\n      }\n    }\n  }\n  end() {\n    this.beginTime = this.endInternal();\n    this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\", this.averageCpu);\n    if (!this.gl || !this.ext)\n      return;\n    if (this.queryCreated && this.gl.getQuery(this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY)) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n    }\n  }\n  endInternal() {\n    this.frames++;\n    const time = (performance || Date).now();\n    if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n      this.prevCpuTime = time;\n    }\n    if (time >= this.prevTime + 1e3) {\n      const fps = this.frames * 1e3 / (time - this.prevTime);\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n      this.prevTime = time;\n      this.frames = 0;\n    }\n    return time;\n  }\n  addToAverage(value, averageArray) {\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n      averageArray.logs.shift();\n    }\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n      averageArray.graph.shift();\n    }\n  }\n  beginProfiling(marker) {\n    if (window.performance) {\n      window.performance.mark(marker);\n    }\n  }\n  endProfiling(startMarker, endMarker, measureName, averageArray) {\n    if (window.performance && endMarker) {\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.addToAverage(cpuMeasure.duration, averageArray);\n    }\n  }\n  updatePanel(panel2, averageArray) {\n    if (averageArray.logs.length > 0) {\n      let sumLog = 0;\n      let max = 0.01;\n      for (let i = 0; i < averageArray.logs.length; i++) {\n        sumLog += averageArray.logs[i];\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n      }\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n        sumGraph += averageArray.graph[i];\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n      }\n      if (panel2) {\n        panel2.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n    }\n  }\n};\n_Stats.Panel = panel;\nlet Stats = _Stats;\nmodule.exports = Stats;\n//# sourceMappingURL=main.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHMtZ2wvZGlzdC9tYWluLmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGNBQWMsbUJBQU8sQ0FBQyxpRUFBYTtBQUNuQztBQUNBLGdCQUFnQix1SEFBdUgsSUFBSTtBQUMzSTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsTUFBTSxPQUFPLFlBQVksY0FBYztBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isb0NBQW9DO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw4QkFBOEI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsK0JBQStCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlbnRjYXIvLi9ub2RlX21vZHVsZXMvc3RhdHMtZ2wvZGlzdC9tYWluLmNqcz9lMWJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgcGFuZWwgPSByZXF1aXJlKFwiLi9wYW5lbC5janNcIik7XG5jb25zdCBfU3RhdHMgPSBjbGFzcyBfU3RhdHMge1xuICBjb25zdHJ1Y3Rvcih7IGxvZ3NQZXJTZWNvbmQgPSAyMCwgc2FtcGxlc0xvZyA9IDEwMCwgc2FtcGxlc0dyYXBoID0gMTAsIHByZWNpc2lvbiA9IDIsIG1pbmltYWwgPSBmYWxzZSwgaG9yaXpvbnRhbCA9IHRydWUsIG1vZGUgPSAwIH0gPSB7fSkge1xuICAgIHRoaXMubW9kZSA9IG1vZGU7XG4gICAgdGhpcy5ob3Jpem9udGFsID0gaG9yaXpvbnRhbDtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgdGhpcy5jb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO29wYWNpdHk6MC45O3otaW5kZXg6MTAwMDA7XCI7XG4gICAgaWYgKG1pbmltYWwpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmNzc1RleHQgKz0gXCJjdXJzb3I6cG9pbnRlclwiO1xuICAgIH1cbiAgICB0aGlzLmNhbnZhc0dwdSA9IG51bGw7XG4gICAgdGhpcy5nbCA9IG51bGw7XG4gICAgdGhpcy5xdWVyeSA9IG51bGw7XG4gICAgdGhpcy5taW5pbWFsID0gbWluaW1hbDtcbiAgICB0aGlzLmJlZ2luVGltZSA9IChwZXJmb3JtYW5jZSB8fCBEYXRlKS5ub3coKTtcbiAgICB0aGlzLnByZXZUaW1lID0gdGhpcy5iZWdpblRpbWU7XG4gICAgdGhpcy5wcmV2Q3B1VGltZSA9IHRoaXMuYmVnaW5UaW1lO1xuICAgIHRoaXMuZnJhbWVzID0gMDtcbiAgICB0aGlzLmF2ZXJhZ2VDcHUgPSB7XG4gICAgICBsb2dzOiBbXSxcbiAgICAgIGdyYXBoOiBbXVxuICAgIH07XG4gICAgdGhpcy5hdmVyYWdlR3B1ID0ge1xuICAgICAgbG9nczogW10sXG4gICAgICBncmFwaDogW11cbiAgICB9O1xuICAgIHRoaXMucXVlcnlDcmVhdGVkID0gZmFsc2U7XG4gICAgdGhpcy5mcHNQYW5lbCA9IHRoaXMuYWRkUGFuZWwobmV3IF9TdGF0cy5QYW5lbChcIkZQU1wiLCBcIiMwZmZcIiwgXCIjMDAyXCIpLCAwKTtcbiAgICB0aGlzLm1zUGFuZWwgPSB0aGlzLmFkZFBhbmVsKG5ldyBfU3RhdHMuUGFuZWwoXCJDUFVcIiwgXCIjMGYwXCIsIFwiIzAyMFwiKSwgMSk7XG4gICAgdGhpcy5ncHVQYW5lbCA9IG51bGw7XG4gICAgdGhpcy5zYW1wbGVzTG9nID0gc2FtcGxlc0xvZztcbiAgICB0aGlzLnNhbXBsZXNHcmFwaCA9IHNhbXBsZXNHcmFwaDtcbiAgICB0aGlzLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICB0aGlzLmxvZ3NQZXJTZWNvbmQgPSBsb2dzUGVyU2Vjb25kO1xuICAgIGlmICh0aGlzLm1pbmltYWwpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zaG93UGFuZWwoKyt0aGlzLm1vZGUgJSB0aGlzLmNvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGgpO1xuICAgICAgfSwgZmFsc2UpO1xuICAgICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICAgIHRoaXMuc2hvd1BhbmVsKHRoaXMubW9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5yZXNpemVQYW5lbCh0aGlzLmZwc1BhbmVsLCAwKTtcbiAgICAgICAgdGhpcy5yZXNpemVQYW5lbCh0aGlzLm1zUGFuZWwsIDEpO1xuICAgICAgICBpZiAodGhpcy5ncHVQYW5lbCkge1xuICAgICAgICAgIHRoaXMucmVzaXplUGFuZWwodGhpcy5ncHVQYW5lbCwgMik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXNpemVQYW5lbChwYW5lbDIsIG9mZnNldCkge1xuICAgIHBhbmVsMi5jYW52YXMuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgaWYgKHRoaXMubWluaW1hbCkge1xuICAgICAgcGFuZWwyLmNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhbmVsMi5jYW52YXMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIGlmICh0aGlzLmhvcml6b250YWwpIHtcbiAgICAgICAgcGFuZWwyLmNhbnZhcy5zdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICBwYW5lbDIuY2FudmFzLnN0eWxlLmxlZnQgPSBvZmZzZXQgKiBwYW5lbDIuV0lEVEggLyBwYW5lbDIuUFIgKyBcInB4XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYW5lbDIuY2FudmFzLnN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgICAgICBwYW5lbDIuY2FudmFzLnN0eWxlLnRvcCA9IG9mZnNldCAqIHBhbmVsMi5IRUlHSFQgLyBwYW5lbDIuUFIgKyBcInB4XCI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGFkZFBhbmVsKHBhbmVsMiwgb2Zmc2V0KSB7XG4gICAgaWYgKHBhbmVsMi5jYW52YXMpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHBhbmVsMi5jYW52YXMpO1xuICAgICAgdGhpcy5yZXNpemVQYW5lbChwYW5lbDIsIG9mZnNldCk7XG4gICAgfVxuICAgIHJldHVybiBwYW5lbDI7XG4gIH1cbiAgc2hvd1BhbmVsKGlkKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLmNvbnRhaW5lci5jaGlsZHJlbltpXTtcbiAgICAgIGNoaWxkLnN0eWxlLmRpc3BsYXkgPSBpID09PSBpZCA/IFwiYmxvY2tcIiA6IFwibm9uZVwiO1xuICAgIH1cbiAgICB0aGlzLm1vZGUgPSBpZDtcbiAgfVxuICBpbml0KGNhbnZhcykge1xuICAgIHRoaXMuY2FudmFzR3B1ID0gY2FudmFzO1xuICAgIGlmICghdGhpcy5jYW52YXNHcHUpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5nbCA9IHRoaXMuY2FudmFzR3B1LmdldENvbnRleHQoXCJ3ZWJnbDJcIik7XG4gICAgdGhpcy5leHQgPSB0aGlzLmdsID8gdGhpcy5nbC5nZXRFeHRlbnNpb24oXCJFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlfd2ViZ2wyXCIpIDogbnVsbDtcbiAgICBpZiAodGhpcy5leHQpIHtcbiAgICAgIHRoaXMuZ3B1UGFuZWwgPSB0aGlzLmFkZFBhbmVsKG5ldyBfU3RhdHMuUGFuZWwoXCJHUFVcIiwgXCIjZmYwXCIsIFwiIzIyMFwiKSwgMik7XG4gICAgfVxuICB9XG4gIGJlZ2luKCkge1xuICAgIHRoaXMuYmVnaW5Qcm9maWxpbmcoXCJjcHUtc3RhcnRlZFwiKTtcbiAgICBpZiAoIXRoaXMuZ2wgfHwgIXRoaXMuZXh0KVxuICAgICAgcmV0dXJuO1xuICAgIGlmICh0aGlzLnF1ZXJ5KSB7XG4gICAgICBjb25zdCBhdmFpbGFibGUgPSB0aGlzLmdsLmdldFF1ZXJ5UGFyYW1ldGVyKHRoaXMucXVlcnksIHRoaXMuZ2wuUVVFUllfUkVTVUxUX0FWQUlMQUJMRSk7XG4gICAgICB0aGlzLmRpc2pvaW50ID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIodGhpcy5leHQuR1BVX0RJU0pPSU5UX0VYVCk7XG4gICAgICBpZiAoYXZhaWxhYmxlICYmICF0aGlzLmRpc2pvaW50KSB7XG4gICAgICAgIHRoaXMubnMgPSB0aGlzLmdsLmdldFF1ZXJ5UGFyYW1ldGVyKHRoaXMucXVlcnksIHRoaXMuZ2wuUVVFUllfUkVTVUxUKTtcbiAgICAgICAgY29uc3QgbXMgPSB0aGlzLm5zICogMWUtNjtcbiAgICAgICAgaWYgKGF2YWlsYWJsZSB8fCB0aGlzLmRpc2pvaW50KSB7XG4gICAgICAgICAgdGhpcy5nbC5kZWxldGVRdWVyeSh0aGlzLnF1ZXJ5KTtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXZhaWxhYmxlKSB7XG4gICAgICAgICAgdGhpcy5hZGRUb0F2ZXJhZ2UobXMsIHRoaXMuYXZlcmFnZUdwdSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLnF1ZXJ5KSB7XG4gICAgICB0aGlzLnF1ZXJ5Q3JlYXRlZCA9IHRydWU7XG4gICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5nbC5jcmVhdGVRdWVyeSgpO1xuICAgICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgICAgdGhpcy5nbC5iZWdpblF1ZXJ5KHRoaXMuZXh0LlRJTUVfRUxBUFNFRF9FWFQsIHRoaXMucXVlcnkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbmQoKSB7XG4gICAgdGhpcy5iZWdpblRpbWUgPSB0aGlzLmVuZEludGVybmFsKCk7XG4gICAgdGhpcy5lbmRQcm9maWxpbmcoXCJjcHUtc3RhcnRlZFwiLCBcImNwdS1maW5pc2hlZFwiLCBcImNwdS1kdXJhdGlvblwiLCB0aGlzLmF2ZXJhZ2VDcHUpO1xuICAgIGlmICghdGhpcy5nbCB8fCAhdGhpcy5leHQpXG4gICAgICByZXR1cm47XG4gICAgaWYgKHRoaXMucXVlcnlDcmVhdGVkICYmIHRoaXMuZ2wuZ2V0UXVlcnkodGhpcy5leHQuVElNRV9FTEFQU0VEX0VYVCwgdGhpcy5nbC5DVVJSRU5UX1FVRVJZKSkge1xuICAgICAgdGhpcy5nbC5lbmRRdWVyeSh0aGlzLmV4dC5USU1FX0VMQVBTRURfRVhUKTtcbiAgICB9XG4gIH1cbiAgZW5kSW50ZXJuYWwoKSB7XG4gICAgdGhpcy5mcmFtZXMrKztcbiAgICBjb25zdCB0aW1lID0gKHBlcmZvcm1hbmNlIHx8IERhdGUpLm5vdygpO1xuICAgIGlmICh0aW1lID49IHRoaXMucHJldkNwdVRpbWUgKyAxZTMgLyB0aGlzLmxvZ3NQZXJTZWNvbmQpIHtcbiAgICAgIHRoaXMudXBkYXRlUGFuZWwodGhpcy5tc1BhbmVsLCB0aGlzLmF2ZXJhZ2VDcHUpO1xuICAgICAgdGhpcy51cGRhdGVQYW5lbCh0aGlzLmdwdVBhbmVsLCB0aGlzLmF2ZXJhZ2VHcHUpO1xuICAgICAgdGhpcy5wcmV2Q3B1VGltZSA9IHRpbWU7XG4gICAgfVxuICAgIGlmICh0aW1lID49IHRoaXMucHJldlRpbWUgKyAxZTMpIHtcbiAgICAgIGNvbnN0IGZwcyA9IHRoaXMuZnJhbWVzICogMWUzIC8gKHRpbWUgLSB0aGlzLnByZXZUaW1lKTtcbiAgICAgIHRoaXMuZnBzUGFuZWwudXBkYXRlKGZwcywgZnBzLCAxMDAsIDEwMCwgMCk7XG4gICAgICB0aGlzLnByZXZUaW1lID0gdGltZTtcbiAgICAgIHRoaXMuZnJhbWVzID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRpbWU7XG4gIH1cbiAgYWRkVG9BdmVyYWdlKHZhbHVlLCBhdmVyYWdlQXJyYXkpIHtcbiAgICBhdmVyYWdlQXJyYXkubG9ncy5wdXNoKHZhbHVlKTtcbiAgICBpZiAoYXZlcmFnZUFycmF5LmxvZ3MubGVuZ3RoID4gdGhpcy5zYW1wbGVzTG9nKSB7XG4gICAgICBhdmVyYWdlQXJyYXkubG9ncy5zaGlmdCgpO1xuICAgIH1cbiAgICBhdmVyYWdlQXJyYXkuZ3JhcGgucHVzaCh2YWx1ZSk7XG4gICAgaWYgKGF2ZXJhZ2VBcnJheS5ncmFwaC5sZW5ndGggPiB0aGlzLnNhbXBsZXNHcmFwaCkge1xuICAgICAgYXZlcmFnZUFycmF5LmdyYXBoLnNoaWZ0KCk7XG4gICAgfVxuICB9XG4gIGJlZ2luUHJvZmlsaW5nKG1hcmtlcikge1xuICAgIGlmICh3aW5kb3cucGVyZm9ybWFuY2UpIHtcbiAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5tYXJrKG1hcmtlcik7XG4gICAgfVxuICB9XG4gIGVuZFByb2ZpbGluZyhzdGFydE1hcmtlciwgZW5kTWFya2VyLCBtZWFzdXJlTmFtZSwgYXZlcmFnZUFycmF5KSB7XG4gICAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSAmJiBlbmRNYXJrZXIpIHtcbiAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5tYXJrKGVuZE1hcmtlcik7XG4gICAgICBjb25zdCBjcHVNZWFzdXJlID0gcGVyZm9ybWFuY2UubWVhc3VyZShtZWFzdXJlTmFtZSwgc3RhcnRNYXJrZXIsIGVuZE1hcmtlcik7XG4gICAgICB0aGlzLmFkZFRvQXZlcmFnZShjcHVNZWFzdXJlLmR1cmF0aW9uLCBhdmVyYWdlQXJyYXkpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVQYW5lbChwYW5lbDIsIGF2ZXJhZ2VBcnJheSkge1xuICAgIGlmIChhdmVyYWdlQXJyYXkubG9ncy5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgc3VtTG9nID0gMDtcbiAgICAgIGxldCBtYXggPSAwLjAxO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdmVyYWdlQXJyYXkubG9ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzdW1Mb2cgKz0gYXZlcmFnZUFycmF5LmxvZ3NbaV07XG4gICAgICAgIGlmIChhdmVyYWdlQXJyYXkubG9nc1tpXSA+IG1heCkge1xuICAgICAgICAgIG1heCA9IGF2ZXJhZ2VBcnJheS5sb2dzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgc3VtR3JhcGggPSAwO1xuICAgICAgbGV0IG1heEdyYXBoID0gMC4wMTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXZlcmFnZUFycmF5LmdyYXBoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN1bUdyYXBoICs9IGF2ZXJhZ2VBcnJheS5ncmFwaFtpXTtcbiAgICAgICAgaWYgKGF2ZXJhZ2VBcnJheS5ncmFwaFtpXSA+IG1heEdyYXBoKSB7XG4gICAgICAgICAgbWF4R3JhcGggPSBhdmVyYWdlQXJyYXkuZ3JhcGhbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYW5lbDIpIHtcbiAgICAgICAgcGFuZWwyLnVwZGF0ZShzdW1Mb2cgLyBNYXRoLm1pbihhdmVyYWdlQXJyYXkubG9ncy5sZW5ndGgsIHRoaXMuc2FtcGxlc0xvZyksIHN1bUdyYXBoIC8gTWF0aC5taW4oYXZlcmFnZUFycmF5LmdyYXBoLmxlbmd0aCwgdGhpcy5zYW1wbGVzR3JhcGgpLCBtYXgsIG1heEdyYXBoLCB0aGlzLnByZWNpc2lvbik7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuX1N0YXRzLlBhbmVsID0gcGFuZWw7XG5sZXQgU3RhdHMgPSBfU3RhdHM7XG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFpbi5janMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/stats-gl/dist/main.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/stats-gl/dist/panel.cjs":
/*!**********************************************!*\
  !*** ./node_modules/stats-gl/dist/panel.cjs ***!
  \**********************************************/
/***/ ((module) => {

eval("\nclass Panel {\n  constructor(name, fg, bg) {\n    this.name = name;\n    this.fg = fg;\n    this.bg = bg;\n    this.PR = Math.round(window.devicePixelRatio || 1);\n    this.WIDTH = 90 * this.PR;\n    this.HEIGHT = 48 * this.PR;\n    this.TEXT_X = 3 * this.PR;\n    this.TEXT_Y = 2 * this.PR;\n    this.GRAPH_X = 3 * this.PR;\n    this.GRAPH_Y = 15 * this.PR;\n    this.GRAPH_WIDTH = 84 * this.PR;\n    this.GRAPH_HEIGHT = 30 * this.PR;\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = 90 * this.PR;\n    this.canvas.height = 48 * this.PR;\n    this.canvas.style.width = \"90px\";\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.height = \"48px\";\n    this.canvas.style.cssText = \"width:90px;height:48px\";\n    this.context = this.canvas.getContext(\"2d\");\n    if (this.context) {\n      this.context.font = \"bold \" + 9 * this.PR + \"px Helvetica,Arial,sans-serif\";\n      this.context.textBaseline = \"top\";\n      this.context.fillStyle = this.bg;\n      this.context.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n      this.context.fillStyle = this.fg;\n      this.context.fillText(this.name, this.TEXT_X, this.TEXT_Y);\n      this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n      this.context.fillStyle = this.bg;\n      this.context.globalAlpha = 0.9;\n      this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n    }\n  }\n  update(value, valueGraph, maxValue, maxGraph, decimals = 0) {\n    let min = Infinity, max = 0;\n    if (!this.context)\n      return;\n    min = Math.min(min, value);\n    max = Math.max(maxValue, value);\n    maxGraph = Math.max(maxGraph, valueGraph);\n    this.context.fillStyle = this.bg;\n    this.context.globalAlpha = 1;\n    this.context.fillRect(0, 0, this.WIDTH, this.GRAPH_Y);\n    this.context.fillStyle = this.fg;\n    this.context.fillText(value.toFixed(decimals) + \" \" + this.name + \" (\" + min.toFixed(decimals) + \"-\" + parseFloat(max.toFixed(decimals)) + \")\", this.TEXT_X, this.TEXT_Y);\n    this.context.drawImage(this.canvas, this.GRAPH_X + this.PR, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT, this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT);\n    this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, this.GRAPH_HEIGHT);\n    this.context.fillStyle = this.bg;\n    this.context.globalAlpha = 0.9;\n    this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, (1 - valueGraph / maxGraph) * this.GRAPH_HEIGHT);\n  }\n}\n;\nmodule.exports = Panel;\n//# sourceMappingURL=panel.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhdHMtZ2wvZGlzdC9wYW5lbC5janMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlbnRjYXIvLi9ub2RlX21vZHVsZXMvc3RhdHMtZ2wvZGlzdC9wYW5lbC5janM/NjRhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNsYXNzIFBhbmVsIHtcbiAgY29uc3RydWN0b3IobmFtZSwgZmcsIGJnKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmZnID0gZmc7XG4gICAgdGhpcy5iZyA9IGJnO1xuICAgIHRoaXMuUFIgPSBNYXRoLnJvdW5kKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpO1xuICAgIHRoaXMuV0lEVEggPSA5MCAqIHRoaXMuUFI7XG4gICAgdGhpcy5IRUlHSFQgPSA0OCAqIHRoaXMuUFI7XG4gICAgdGhpcy5URVhUX1ggPSAzICogdGhpcy5QUjtcbiAgICB0aGlzLlRFWFRfWSA9IDIgKiB0aGlzLlBSO1xuICAgIHRoaXMuR1JBUEhfWCA9IDMgKiB0aGlzLlBSO1xuICAgIHRoaXMuR1JBUEhfWSA9IDE1ICogdGhpcy5QUjtcbiAgICB0aGlzLkdSQVBIX1dJRFRIID0gODQgKiB0aGlzLlBSO1xuICAgIHRoaXMuR1JBUEhfSEVJR0hUID0gMzAgKiB0aGlzLlBSO1xuICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IDkwICogdGhpcy5QUjtcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSA0OCAqIHRoaXMuUFI7XG4gICAgdGhpcy5jYW52YXMuc3R5bGUud2lkdGggPSBcIjkwcHhcIjtcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5oZWlnaHQgPSBcIjQ4cHhcIjtcbiAgICB0aGlzLmNhbnZhcy5zdHlsZS5jc3NUZXh0ID0gXCJ3aWR0aDo5MHB4O2hlaWdodDo0OHB4XCI7XG4gICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGlmICh0aGlzLmNvbnRleHQpIHtcbiAgICAgIHRoaXMuY29udGV4dC5mb250ID0gXCJib2xkIFwiICsgOSAqIHRoaXMuUFIgKyBcInB4IEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmXCI7XG4gICAgICB0aGlzLmNvbnRleHQudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcbiAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmJnO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDAsIDAsIHRoaXMuV0lEVEgsIHRoaXMuSEVJR0hUKTtcbiAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmZnO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMubmFtZSwgdGhpcy5URVhUX1gsIHRoaXMuVEVYVF9ZKTtcbiAgICAgIHRoaXMuY29udGV4dC5maWxsUmVjdCh0aGlzLkdSQVBIX1gsIHRoaXMuR1JBUEhfWSwgdGhpcy5HUkFQSF9XSURUSCwgdGhpcy5HUkFQSF9IRUlHSFQpO1xuICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuYmc7XG4gICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSAwLjk7XG4gICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QodGhpcy5HUkFQSF9YLCB0aGlzLkdSQVBIX1ksIHRoaXMuR1JBUEhfV0lEVEgsIHRoaXMuR1JBUEhfSEVJR0hUKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlKHZhbHVlLCB2YWx1ZUdyYXBoLCBtYXhWYWx1ZSwgbWF4R3JhcGgsIGRlY2ltYWxzID0gMCkge1xuICAgIGxldCBtaW4gPSBJbmZpbml0eSwgbWF4ID0gMDtcbiAgICBpZiAoIXRoaXMuY29udGV4dClcbiAgICAgIHJldHVybjtcbiAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHZhbHVlKTtcbiAgICBtYXggPSBNYXRoLm1heChtYXhWYWx1ZSwgdmFsdWUpO1xuICAgIG1heEdyYXBoID0gTWF0aC5tYXgobWF4R3JhcGgsIHZhbHVlR3JhcGgpO1xuICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmJnO1xuICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDAsIDAsIHRoaXMuV0lEVEgsIHRoaXMuR1JBUEhfWSk7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuZmc7XG4gICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHZhbHVlLnRvRml4ZWQoZGVjaW1hbHMpICsgXCIgXCIgKyB0aGlzLm5hbWUgKyBcIiAoXCIgKyBtaW4udG9GaXhlZChkZWNpbWFscykgKyBcIi1cIiArIHBhcnNlRmxvYXQobWF4LnRvRml4ZWQoZGVjaW1hbHMpKSArIFwiKVwiLCB0aGlzLlRFWFRfWCwgdGhpcy5URVhUX1kpO1xuICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5jYW52YXMsIHRoaXMuR1JBUEhfWCArIHRoaXMuUFIsIHRoaXMuR1JBUEhfWSwgdGhpcy5HUkFQSF9XSURUSCAtIHRoaXMuUFIsIHRoaXMuR1JBUEhfSEVJR0hULCB0aGlzLkdSQVBIX1gsIHRoaXMuR1JBUEhfWSwgdGhpcy5HUkFQSF9XSURUSCAtIHRoaXMuUFIsIHRoaXMuR1JBUEhfSEVJR0hUKTtcbiAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QodGhpcy5HUkFQSF9YICsgdGhpcy5HUkFQSF9XSURUSCAtIHRoaXMuUFIsIHRoaXMuR1JBUEhfWSwgdGhpcy5QUiwgdGhpcy5HUkFQSF9IRUlHSFQpO1xuICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmJnO1xuICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IDAuOTtcbiAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QodGhpcy5HUkFQSF9YICsgdGhpcy5HUkFQSF9XSURUSCAtIHRoaXMuUFIsIHRoaXMuR1JBUEhfWSwgdGhpcy5QUiwgKDEgLSB2YWx1ZUdyYXBoIC8gbWF4R3JhcGgpICogdGhpcy5HUkFQSF9IRUlHSFQpO1xuICB9XG59XG47XG5tb2R1bGUuZXhwb3J0cyA9IFBhbmVsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFuZWwuY2pzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/stats-gl/dist/panel.cjs\n");

/***/ })

};
;